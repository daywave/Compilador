
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNACION BOOLEANO BREAK COMA DISTINTO DIV ENTERO ESCRIBIR FALSO FLOTANTE FSI HACER HASTA ID IGUAL LEER LLAVDER LLAVIZQ MAYOR MAYORIGUAL MENOR MENORIGUAL MIENTRAS MULT NO NUMERO OR PARDER PARIZQ POTENCIA PROGRAMA PUNTOCOMA RESTA SI SINO SUMA THEN VERDADERO\n    programa : PROGRAMA LLAVIZQ list_decl list_sent LLAVDER\n    \n    list_decl : decl list_decl\n              | empty\n    \n    decl : tipo list_id PUNTOCOMA\n    \n    tipo : ENTERO\n         | FLOTANTE\n         | BOOLEANO\n    \n    list_id : ID COMA list_id\n            | ID\n    \n    list_sent : sent list_sent\n              | empty\n    \n    sent : sent_if\n         | sent_while\n         | sent_do\n         | sent_read\n         | sent_write\n         | bloque\n         | sent_assign\n         | sent_break\n    \n    sent_if : SI PARIZQ exp_bool PARDER THEN bloque FSI\n            | SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI\n    \n    sent_while : MIENTRAS PARIZQ exp_bool PARDER bloque\n    \n    sent_do : HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA\n    \n    sent_read : LEER ID PUNTOCOMA\n    \n    sent_write : ESCRIBIR exp_bool PUNTOCOMA\n    \n    bloque : LLAVIZQ list_sent LLAVDER\n    \n    sent_assign : ID ASIGNACION exp_bool PUNTOCOMA\n    \n    sent_break : BREAK PUNTOCOMA\n    \n    exp_bool : exp_bool OR comb\n             | comb\n    \n    comb : comb AND igualdad\n         | igualdad\n    \n    igualdad : igualdad IGUAL rel\n             | igualdad DISTINTO rel\n             | rel\n    \n    rel : expr MENOR expr\n        | expr MAYOR expr\n        | expr MENORIGUAL expr\n        | expr MAYORIGUAL expr\n        | expr\n    \n    expr : expr SUMA term\n         | expr RESTA term\n         | term\n    \n    term : term MULT unario\n         | term DIV unario\n         | unario\n    \n    unario : NO unario\n           | RESTA unario\n           | factor\n    \n    factor : PARIZQ exp_bool PARDER\n           | ID\n           | NUMERO\n           | VERDADERO\n           | FALSO\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,34,],[0,-1,]),'LLAVIZQ':([2,3,4,5,6,11,13,15,16,17,18,19,20,21,22,25,30,56,57,59,63,65,83,85,99,100,104,105,106,108,],[3,-55,11,-55,-3,11,11,-12,-13,-14,-15,-16,-17,-18,-19,11,-2,-28,-4,-26,-24,-25,11,-27,11,-22,-20,11,-23,-21,]),'SI':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,23,-55,-3,23,23,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'MIENTRAS':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,24,-55,-3,24,24,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'HACER':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,25,-55,-3,25,25,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'LEER':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,26,-55,-3,26,26,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'ESCRIBIR':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,28,-55,-3,28,28,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'ID':([3,4,5,6,7,8,9,10,11,13,15,16,17,18,19,20,21,22,26,28,30,36,37,40,47,49,51,56,57,58,59,63,65,66,67,68,69,70,71,72,73,74,75,76,77,84,85,100,104,106,108,],[-55,27,-55,-3,32,-5,-6,-7,27,27,-12,-13,-14,-15,-16,-17,-18,-19,39,52,-2,52,52,52,52,52,52,-28,-4,32,-26,-24,-25,52,52,52,52,52,52,52,52,52,52,52,52,52,-27,-22,-20,-23,-21,]),'BREAK':([3,4,5,6,11,13,15,16,17,18,19,20,21,22,30,56,57,59,63,65,85,100,104,106,108,],[-55,29,-55,-3,29,29,-12,-13,-14,-15,-16,-17,-18,-19,-2,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'LLAVDER':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,30,33,35,56,57,59,63,65,85,100,104,106,108,],[-55,-55,-55,-3,-55,34,-55,-11,-12,-13,-14,-15,-16,-17,-18,-19,-2,59,-10,-28,-4,-26,-24,-25,-27,-22,-20,-23,-21,]),'ENTERO':([3,5,57,],[8,8,-4,]),'FLOTANTE':([3,5,57,],[9,9,-4,]),'BOOLEANO':([3,5,57,],[10,10,-4,]),'PARIZQ':([23,24,28,36,37,40,47,49,51,62,66,67,68,69,70,71,72,73,74,75,76,77,84,],[36,37,51,51,51,51,51,51,51,84,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'ASIGNACION':([27,],[40,]),'NO':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'RESTA':([28,36,37,40,45,46,47,48,49,50,51,52,53,54,55,66,67,68,69,70,71,72,73,74,75,76,77,78,79,84,90,91,92,93,94,95,96,97,98,],[47,47,47,47,75,-43,47,-46,47,-49,47,-51,-52,-53,-54,47,47,47,47,47,47,47,47,47,47,47,47,-48,-47,47,75,75,75,75,-41,-42,-44,-45,-50,]),'NUMERO':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'VERDADERO':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FALSO':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'PUNTOCOMA':([29,31,32,39,41,42,43,44,45,46,48,50,52,53,54,55,64,78,79,81,86,87,88,89,90,91,92,93,94,95,96,97,98,103,],[56,57,-9,63,65,-30,-32,-35,-40,-43,-46,-49,-51,-52,-53,-54,85,-48,-47,-8,-29,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,106,]),'COMA':([32,],[58,]),'HASTA':([38,59,],[62,-26,]),'OR':([41,42,43,44,45,46,48,50,52,53,54,55,60,61,64,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,101,],[66,-30,-32,-35,-40,-43,-46,-49,-51,-52,-53,-54,66,66,66,-48,-47,66,-29,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,66,]),'PARDER':([42,43,44,45,46,48,50,52,53,54,55,60,61,78,79,80,86,87,88,89,90,91,92,93,94,95,96,97,98,101,],[-30,-32,-35,-40,-43,-46,-49,-51,-52,-53,-54,82,83,-48,-47,98,-29,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,103,]),'AND':([42,43,44,45,46,48,50,52,53,54,55,78,79,86,87,88,89,90,91,92,93,94,95,96,97,98,],[67,-32,-35,-40,-43,-46,-49,-51,-52,-53,-54,-48,-47,67,-31,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,]),'IGUAL':([43,44,45,46,48,50,52,53,54,55,78,79,87,88,89,90,91,92,93,94,95,96,97,98,],[68,-35,-40,-43,-46,-49,-51,-52,-53,-54,-48,-47,68,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,]),'DISTINTO':([43,44,45,46,48,50,52,53,54,55,78,79,87,88,89,90,91,92,93,94,95,96,97,98,],[69,-35,-40,-43,-46,-49,-51,-52,-53,-54,-48,-47,69,-33,-34,-36,-37,-38,-39,-41,-42,-44,-45,-50,]),'MENOR':([45,46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[70,-43,-46,-49,-51,-52,-53,-54,-48,-47,-41,-42,-44,-45,-50,]),'MAYOR':([45,46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[71,-43,-46,-49,-51,-52,-53,-54,-48,-47,-41,-42,-44,-45,-50,]),'MENORIGUAL':([45,46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[72,-43,-46,-49,-51,-52,-53,-54,-48,-47,-41,-42,-44,-45,-50,]),'MAYORIGUAL':([45,46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[73,-43,-46,-49,-51,-52,-53,-54,-48,-47,-41,-42,-44,-45,-50,]),'SUMA':([45,46,48,50,52,53,54,55,78,79,90,91,92,93,94,95,96,97,98,],[74,-43,-46,-49,-51,-52,-53,-54,-48,-47,74,74,74,74,-41,-42,-44,-45,-50,]),'MULT':([46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[76,-46,-49,-51,-52,-53,-54,-48,-47,76,76,-44,-45,-50,]),'DIV':([46,48,50,52,53,54,55,78,79,94,95,96,97,98,],[77,-46,-49,-51,-52,-53,-54,-48,-47,77,77,-44,-45,-50,]),'FSI':([59,102,107,],[-26,104,108,]),'SINO':([59,102,],[-26,105,]),'THEN':([82,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'list_decl':([3,5,],[4,30,]),'decl':([3,5,],[5,5,]),'empty':([3,4,5,11,13,],[6,14,6,14,14,]),'tipo':([3,5,],[7,7,]),'list_sent':([4,11,13,],[12,33,35,]),'sent':([4,11,13,],[13,13,13,]),'sent_if':([4,11,13,],[15,15,15,]),'sent_while':([4,11,13,],[16,16,16,]),'sent_do':([4,11,13,],[17,17,17,]),'sent_read':([4,11,13,],[18,18,18,]),'sent_write':([4,11,13,],[19,19,19,]),'bloque':([4,11,13,25,83,99,105,],[20,20,20,38,100,102,107,]),'sent_assign':([4,11,13,],[21,21,21,]),'sent_break':([4,11,13,],[22,22,22,]),'list_id':([7,58,],[31,81,]),'exp_bool':([28,36,37,40,51,84,],[41,60,61,64,80,101,]),'comb':([28,36,37,40,51,66,84,],[42,42,42,42,42,86,42,]),'igualdad':([28,36,37,40,51,66,67,84,],[43,43,43,43,43,43,87,43,]),'rel':([28,36,37,40,51,66,67,68,69,84,],[44,44,44,44,44,44,44,88,89,44,]),'expr':([28,36,37,40,51,66,67,68,69,70,71,72,73,84,],[45,45,45,45,45,45,45,45,45,90,91,92,93,45,]),'term':([28,36,37,40,51,66,67,68,69,70,71,72,73,74,75,84,],[46,46,46,46,46,46,46,46,46,46,46,46,46,94,95,46,]),'unario':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[48,48,48,48,78,79,48,48,48,48,48,48,48,48,48,48,48,96,97,48,]),'factor':([28,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,84,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER','programa',5,'p_programa','sintactico.py',7),
  ('list_decl -> decl list_decl','list_decl',2,'p_list_decl','sintactico.py',13),
  ('list_decl -> empty','list_decl',1,'p_list_decl','sintactico.py',14),
  ('decl -> tipo list_id PUNTOCOMA','decl',3,'p_decl','sintactico.py',23),
  ('tipo -> ENTERO','tipo',1,'p_tipo','sintactico.py',29),
  ('tipo -> FLOTANTE','tipo',1,'p_tipo','sintactico.py',30),
  ('tipo -> BOOLEANO','tipo',1,'p_tipo','sintactico.py',31),
  ('list_id -> ID COMA list_id','list_id',3,'p_list_id','sintactico.py',37),
  ('list_id -> ID','list_id',1,'p_list_id','sintactico.py',38),
  ('list_sent -> sent list_sent','list_sent',2,'p_list_sent','sintactico.py',47),
  ('list_sent -> empty','list_sent',1,'p_list_sent','sintactico.py',48),
  ('sent -> sent_if','sent',1,'p_sent','sintactico.py',57),
  ('sent -> sent_while','sent',1,'p_sent','sintactico.py',58),
  ('sent -> sent_do','sent',1,'p_sent','sintactico.py',59),
  ('sent -> sent_read','sent',1,'p_sent','sintactico.py',60),
  ('sent -> sent_write','sent',1,'p_sent','sintactico.py',61),
  ('sent -> bloque','sent',1,'p_sent','sintactico.py',62),
  ('sent -> sent_assign','sent',1,'p_sent','sintactico.py',63),
  ('sent -> sent_break','sent',1,'p_sent','sintactico.py',64),
  ('sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI','sent_if',7,'p_sent_if','sintactico.py',70),
  ('sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI','sent_if',9,'p_sent_if','sintactico.py',71),
  ('sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque','sent_while',5,'p_sent_while','sintactico.py',80),
  ('sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA','sent_do',7,'p_sent_do','sintactico.py',86),
  ('sent_read -> LEER ID PUNTOCOMA','sent_read',3,'p_sent_read','sintactico.py',92),
  ('sent_write -> ESCRIBIR exp_bool PUNTOCOMA','sent_write',3,'p_sent_write','sintactico.py',98),
  ('bloque -> LLAVIZQ list_sent LLAVDER','bloque',3,'p_bloque','sintactico.py',104),
  ('sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA','sent_assign',4,'p_sent_assign','sintactico.py',110),
  ('sent_break -> BREAK PUNTOCOMA','sent_break',2,'p_sent_break','sintactico.py',116),
  ('exp_bool -> exp_bool OR comb','exp_bool',3,'p_exp_bool','sintactico.py',122),
  ('exp_bool -> comb','exp_bool',1,'p_exp_bool','sintactico.py',123),
  ('comb -> comb AND igualdad','comb',3,'p_comb','sintactico.py',132),
  ('comb -> igualdad','comb',1,'p_comb','sintactico.py',133),
  ('igualdad -> igualdad IGUAL rel','igualdad',3,'p_igualdad','sintactico.py',142),
  ('igualdad -> igualdad DISTINTO rel','igualdad',3,'p_igualdad','sintactico.py',143),
  ('igualdad -> rel','igualdad',1,'p_igualdad','sintactico.py',144),
  ('rel -> expr MENOR expr','rel',3,'p_rel','sintactico.py',156),
  ('rel -> expr MAYOR expr','rel',3,'p_rel','sintactico.py',157),
  ('rel -> expr MENORIGUAL expr','rel',3,'p_rel','sintactico.py',158),
  ('rel -> expr MAYORIGUAL expr','rel',3,'p_rel','sintactico.py',159),
  ('rel -> expr','rel',1,'p_rel','sintactico.py',160),
  ('expr -> expr SUMA term','expr',3,'p_expr','sintactico.py',169),
  ('expr -> expr RESTA term','expr',3,'p_expr','sintactico.py',170),
  ('expr -> term','expr',1,'p_expr','sintactico.py',171),
  ('term -> term MULT unario','term',3,'p_term','sintactico.py',183),
  ('term -> term DIV unario','term',3,'p_term','sintactico.py',184),
  ('term -> unario','term',1,'p_term','sintactico.py',185),
  ('unario -> NO unario','unario',2,'p_unario','sintactico.py',197),
  ('unario -> RESTA unario','unario',2,'p_unario','sintactico.py',198),
  ('unario -> factor','unario',1,'p_unario','sintactico.py',199),
  ('factor -> PARIZQ exp_bool PARDER','factor',3,'p_factor','sintactico.py',211),
  ('factor -> ID','factor',1,'p_factor','sintactico.py',212),
  ('factor -> NUMERO','factor',1,'p_factor','sintactico.py',213),
  ('factor -> VERDADERO','factor',1,'p_factor','sintactico.py',214),
  ('factor -> FALSO','factor',1,'p_factor','sintactico.py',215),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',224),
]

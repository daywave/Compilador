
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNACION BOOLEANO BREAK COMA DISTINTO DIV ENTERO ESCRIBIR FALSO FLOTANTE FSI HACER HASTA ID IGUAL LEER LLAVDER LLAVIZQ MAYOR MAYORIGUAL MENOR MENORIGUAL MIENTRAS MULT NO NUMERO NUMERO_HEX OR PARDER PARIZQ POTENCIA PROGRAMA PUNTOCOMA RESTA SI SINO SUMA THEN VERDADERO\n    programa : PROGRAMA LLAVIZQ list_decl list_sent LLAVDER\n    \n    list_decl : decl list_decl\n              | decl\n    \n    decl : tipo list_id PUNTOCOMA\n    \n    tipo : ENTERO\n         | FLOTANTE\n         | BOOLEANO\n    \n    list_id : ID COMA list_id\n            | ID\n    \n    list_sent : sent list_sent\n              | empty\n              | error PUNTOCOMA list_sent\n    \n    sent : sent_if\n         | sent_while\n         | sent_do\n         | sent_read\n         | sent_write\n         | bloque\n         | sent_assign\n         | sent_break\n    \n    sent_if : SI PARIZQ exp_bool PARDER THEN bloque FSI\n            | SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI\n    \n    sent_while : MIENTRAS PARIZQ exp_bool PARDER bloque\n    \n    sent_do : HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA\n    \n    sent_read : LEER ID PUNTOCOMA\n    \n    sent_write : ESCRIBIR exp_bool PUNTOCOMA\n    \n    bloque : LLAVIZQ list_sent LLAVDER\n    \n    sent_assign : ID ASIGNACION exp_bool PUNTOCOMA\n    \n    sent_break : BREAK PUNTOCOMA\n    \n    exp_bool : exp_bool OR comb\n             | comb\n    \n    comb : comb AND igualdad\n         | igualdad\n    \n    igualdad : igualdad IGUAL rel\n             | igualdad DISTINTO rel\n             | rel\n    \n    rel : expr MENOR expr\n        | expr MAYOR expr\n        | expr MENORIGUAL expr\n        | expr MAYORIGUAL expr\n        | expr\n    \n    expr : expr SUMA term\n         | expr RESTA term\n         | term\n    \n    term : term MULT unario\n         | term DIV unario\n         | unario\n    \n    unario : NO unario\n           | RESTA unario\n           | factor\n    \n    factor : PARIZQ exp_bool PARDER\n           | ID\n           | NUMERO\n           | VERDADERO\n           | FALSO\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,34,],[0,-1,]),'LLAVIZQ':([2,4,5,10,12,15,16,17,18,19,20,21,22,25,30,36,57,58,60,65,67,85,87,101,102,106,107,108,110,],[3,10,-3,10,10,-13,-14,-15,-16,-17,-18,-19,-20,10,-2,10,-29,-4,-27,-25,-26,10,-28,10,-23,-21,10,-24,-22,]),'ENTERO':([3,5,58,],[7,7,-4,]),'FLOTANTE':([3,5,58,],[8,8,-4,]),'BOOLEANO':([3,5,58,],[9,9,-4,]),'error':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[14,-3,14,14,-13,-14,-15,-16,-17,-18,-19,-20,-2,14,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'LLAVDER':([4,5,10,11,12,13,15,16,17,18,19,20,21,22,30,33,35,36,57,58,60,61,65,67,87,102,106,108,110,],[-56,-3,-56,34,-56,-11,-13,-14,-15,-16,-17,-18,-19,-20,-2,60,-10,-56,-29,-4,-27,-12,-25,-26,-28,-23,-21,-24,-22,]),'SI':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[23,-3,23,23,-13,-14,-15,-16,-17,-18,-19,-20,-2,23,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'MIENTRAS':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[24,-3,24,24,-13,-14,-15,-16,-17,-18,-19,-20,-2,24,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'HACER':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[25,-3,25,25,-13,-14,-15,-16,-17,-18,-19,-20,-2,25,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'LEER':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[26,-3,26,26,-13,-14,-15,-16,-17,-18,-19,-20,-2,26,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'ESCRIBIR':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[28,-3,28,28,-13,-14,-15,-16,-17,-18,-19,-20,-2,28,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'ID':([4,5,6,7,8,9,10,12,15,16,17,18,19,20,21,22,26,28,30,36,37,38,41,48,50,52,57,58,59,60,65,67,68,69,70,71,72,73,74,75,76,77,78,79,86,87,102,106,108,110,],[27,-3,32,-5,-6,-7,27,27,-13,-14,-15,-16,-17,-18,-19,-20,40,53,-2,27,53,53,53,53,53,53,-29,-4,32,-27,-25,-26,53,53,53,53,53,53,53,53,53,53,53,53,53,-28,-23,-21,-24,-22,]),'BREAK':([4,5,10,12,15,16,17,18,19,20,21,22,30,36,57,58,60,65,67,87,102,106,108,110,],[29,-3,29,29,-13,-14,-15,-16,-17,-18,-19,-20,-2,29,-29,-4,-27,-25,-26,-28,-23,-21,-24,-22,]),'PUNTOCOMA':([14,29,31,32,40,42,43,44,45,46,47,49,51,53,54,55,56,66,80,81,83,88,89,90,91,92,93,94,95,96,97,98,99,100,105,],[36,57,58,-9,65,67,-31,-33,-36,-41,-44,-47,-50,-52,-53,-54,-55,87,-49,-48,-8,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,108,]),'PARIZQ':([23,24,28,37,38,41,48,50,52,64,68,69,70,71,72,73,74,75,76,77,78,79,86,],[37,38,52,52,52,52,52,52,52,86,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'ASIGNACION':([27,],[41,]),'NO':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'RESTA':([28,37,38,41,46,47,48,49,50,51,52,53,54,55,56,68,69,70,71,72,73,74,75,76,77,78,79,80,81,86,92,93,94,95,96,97,98,99,100,],[48,48,48,48,77,-44,48,-47,48,-50,48,-52,-53,-54,-55,48,48,48,48,48,48,48,48,48,48,48,48,-49,-48,48,77,77,77,77,-42,-43,-45,-46,-51,]),'NUMERO':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'VERDADERO':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'FALSO':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'COMA':([32,],[59,]),'HASTA':([39,60,],[64,-27,]),'OR':([42,43,44,45,46,47,49,51,53,54,55,56,62,63,66,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,103,],[68,-31,-33,-36,-41,-44,-47,-50,-52,-53,-54,-55,68,68,68,-49,-48,68,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,68,]),'PARDER':([43,44,45,46,47,49,51,53,54,55,56,62,63,80,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,103,],[-31,-33,-36,-41,-44,-47,-50,-52,-53,-54,-55,84,85,-49,-48,100,-30,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,105,]),'AND':([43,44,45,46,47,49,51,53,54,55,56,80,81,88,89,90,91,92,93,94,95,96,97,98,99,100,],[69,-33,-36,-41,-44,-47,-50,-52,-53,-54,-55,-49,-48,69,-32,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,]),'IGUAL':([44,45,46,47,49,51,53,54,55,56,80,81,89,90,91,92,93,94,95,96,97,98,99,100,],[70,-36,-41,-44,-47,-50,-52,-53,-54,-55,-49,-48,70,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,]),'DISTINTO':([44,45,46,47,49,51,53,54,55,56,80,81,89,90,91,92,93,94,95,96,97,98,99,100,],[71,-36,-41,-44,-47,-50,-52,-53,-54,-55,-49,-48,71,-34,-35,-37,-38,-39,-40,-42,-43,-45,-46,-51,]),'MENOR':([46,47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[72,-44,-47,-50,-52,-53,-54,-55,-49,-48,-42,-43,-45,-46,-51,]),'MAYOR':([46,47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[73,-44,-47,-50,-52,-53,-54,-55,-49,-48,-42,-43,-45,-46,-51,]),'MENORIGUAL':([46,47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[74,-44,-47,-50,-52,-53,-54,-55,-49,-48,-42,-43,-45,-46,-51,]),'MAYORIGUAL':([46,47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[75,-44,-47,-50,-52,-53,-54,-55,-49,-48,-42,-43,-45,-46,-51,]),'SUMA':([46,47,49,51,53,54,55,56,80,81,92,93,94,95,96,97,98,99,100,],[76,-44,-47,-50,-52,-53,-54,-55,-49,-48,76,76,76,76,-42,-43,-45,-46,-51,]),'MULT':([47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[78,-47,-50,-52,-53,-54,-55,-49,-48,78,78,-45,-46,-51,]),'DIV':([47,49,51,53,54,55,56,80,81,96,97,98,99,100,],[79,-47,-50,-52,-53,-54,-55,-49,-48,79,79,-45,-46,-51,]),'FSI':([60,104,109,],[-27,106,110,]),'SINO':([60,104,],[-27,107,]),'THEN':([84,],[101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'list_decl':([3,5,],[4,30,]),'decl':([3,5,],[5,5,]),'tipo':([3,5,],[6,6,]),'list_sent':([4,10,12,36,],[11,33,35,61,]),'sent':([4,10,12,36,],[12,12,12,12,]),'empty':([4,10,12,36,],[13,13,13,13,]),'sent_if':([4,10,12,36,],[15,15,15,15,]),'sent_while':([4,10,12,36,],[16,16,16,16,]),'sent_do':([4,10,12,36,],[17,17,17,17,]),'sent_read':([4,10,12,36,],[18,18,18,18,]),'sent_write':([4,10,12,36,],[19,19,19,19,]),'bloque':([4,10,12,25,36,85,101,107,],[20,20,20,39,20,102,104,109,]),'sent_assign':([4,10,12,36,],[21,21,21,21,]),'sent_break':([4,10,12,36,],[22,22,22,22,]),'list_id':([6,59,],[31,83,]),'exp_bool':([28,37,38,41,52,86,],[42,62,63,66,82,103,]),'comb':([28,37,38,41,52,68,86,],[43,43,43,43,43,88,43,]),'igualdad':([28,37,38,41,52,68,69,86,],[44,44,44,44,44,44,89,44,]),'rel':([28,37,38,41,52,68,69,70,71,86,],[45,45,45,45,45,45,45,90,91,45,]),'expr':([28,37,38,41,52,68,69,70,71,72,73,74,75,86,],[46,46,46,46,46,46,46,46,46,92,93,94,95,46,]),'term':([28,37,38,41,52,68,69,70,71,72,73,74,75,76,77,86,],[47,47,47,47,47,47,47,47,47,47,47,47,47,96,97,47,]),'unario':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[49,49,49,49,80,81,49,49,49,49,49,49,49,49,49,49,49,98,99,49,]),'factor':([28,37,38,41,48,50,52,68,69,70,71,72,73,74,75,76,77,78,79,86,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER','programa',5,'p_programa','analizador_sintaxis.py',20),
  ('list_decl -> decl list_decl','list_decl',2,'p_list_decl','analizador_sintaxis.py',29),
  ('list_decl -> decl','list_decl',1,'p_list_decl','analizador_sintaxis.py',30),
  ('decl -> tipo list_id PUNTOCOMA','decl',3,'p_decl','analizador_sintaxis.py',39),
  ('tipo -> ENTERO','tipo',1,'p_tipo','analizador_sintaxis.py',48),
  ('tipo -> FLOTANTE','tipo',1,'p_tipo','analizador_sintaxis.py',49),
  ('tipo -> BOOLEANO','tipo',1,'p_tipo','analizador_sintaxis.py',50),
  ('list_id -> ID COMA list_id','list_id',3,'p_list_id','analizador_sintaxis.py',56),
  ('list_id -> ID','list_id',1,'p_list_id','analizador_sintaxis.py',57),
  ('list_sent -> sent list_sent','list_sent',2,'p_list_sent','analizador_sintaxis.py',67),
  ('list_sent -> empty','list_sent',1,'p_list_sent','analizador_sintaxis.py',68),
  ('list_sent -> error PUNTOCOMA list_sent','list_sent',3,'p_list_sent','analizador_sintaxis.py',69),
  ('sent -> sent_if','sent',1,'p_sent','analizador_sintaxis.py',84),
  ('sent -> sent_while','sent',1,'p_sent','analizador_sintaxis.py',85),
  ('sent -> sent_do','sent',1,'p_sent','analizador_sintaxis.py',86),
  ('sent -> sent_read','sent',1,'p_sent','analizador_sintaxis.py',87),
  ('sent -> sent_write','sent',1,'p_sent','analizador_sintaxis.py',88),
  ('sent -> bloque','sent',1,'p_sent','analizador_sintaxis.py',89),
  ('sent -> sent_assign','sent',1,'p_sent','analizador_sintaxis.py',90),
  ('sent -> sent_break','sent',1,'p_sent','analizador_sintaxis.py',91),
  ('sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI','sent_if',7,'p_sent_if','analizador_sintaxis.py',97),
  ('sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI','sent_if',9,'p_sent_if','analizador_sintaxis.py',98),
  ('sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque','sent_while',5,'p_sent_while','analizador_sintaxis.py',110),
  ('sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA','sent_do',7,'p_sent_do','analizador_sintaxis.py',117),
  ('sent_read -> LEER ID PUNTOCOMA','sent_read',3,'p_sent_read','analizador_sintaxis.py',124),
  ('sent_write -> ESCRIBIR exp_bool PUNTOCOMA','sent_write',3,'p_sent_write','analizador_sintaxis.py',130),
  ('bloque -> LLAVIZQ list_sent LLAVDER','bloque',3,'p_bloque','analizador_sintaxis.py',136),
  ('sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA','sent_assign',4,'p_sent_assign','analizador_sintaxis.py',143),
  ('sent_break -> BREAK PUNTOCOMA','sent_break',2,'p_sent_break','analizador_sintaxis.py',150),
  ('exp_bool -> exp_bool OR comb','exp_bool',3,'p_exp_bool','analizador_sintaxis.py',156),
  ('exp_bool -> comb','exp_bool',1,'p_exp_bool','analizador_sintaxis.py',157),
  ('comb -> comb AND igualdad','comb',3,'p_comb','analizador_sintaxis.py',169),
  ('comb -> igualdad','comb',1,'p_comb','analizador_sintaxis.py',170),
  ('igualdad -> igualdad IGUAL rel','igualdad',3,'p_igualdad','analizador_sintaxis.py',182),
  ('igualdad -> igualdad DISTINTO rel','igualdad',3,'p_igualdad','analizador_sintaxis.py',183),
  ('igualdad -> rel','igualdad',1,'p_igualdad','analizador_sintaxis.py',184),
  ('rel -> expr MENOR expr','rel',3,'p_rel','analizador_sintaxis.py',202),
  ('rel -> expr MAYOR expr','rel',3,'p_rel','analizador_sintaxis.py',203),
  ('rel -> expr MENORIGUAL expr','rel',3,'p_rel','analizador_sintaxis.py',204),
  ('rel -> expr MAYORIGUAL expr','rel',3,'p_rel','analizador_sintaxis.py',205),
  ('rel -> expr','rel',1,'p_rel','analizador_sintaxis.py',206),
  ('expr -> expr SUMA term','expr',3,'p_expr','analizador_sintaxis.py',217),
  ('expr -> expr RESTA term','expr',3,'p_expr','analizador_sintaxis.py',218),
  ('expr -> term','expr',1,'p_expr','analizador_sintaxis.py',219),
  ('term -> term MULT unario','term',3,'p_term','analizador_sintaxis.py',237),
  ('term -> term DIV unario','term',3,'p_term','analizador_sintaxis.py',238),
  ('term -> unario','term',1,'p_term','analizador_sintaxis.py',239),
  ('unario -> NO unario','unario',2,'p_unario','analizador_sintaxis.py',257),
  ('unario -> RESTA unario','unario',2,'p_unario','analizador_sintaxis.py',258),
  ('unario -> factor','unario',1,'p_unario','analizador_sintaxis.py',259),
  ('factor -> PARIZQ exp_bool PARDER','factor',3,'p_factor','analizador_sintaxis.py',273),
  ('factor -> ID','factor',1,'p_factor','analizador_sintaxis.py',274),
  ('factor -> NUMERO','factor',1,'p_factor','analizador_sintaxis.py',275),
  ('factor -> VERDADERO','factor',1,'p_factor','analizador_sintaxis.py',276),
  ('factor -> FALSO','factor',1,'p_factor','analizador_sintaxis.py',277),
  ('empty -> <empty>','empty',0,'p_empty','analizador_sintaxis.py',286),
]

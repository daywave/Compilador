
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNACION BOOLEANO BREAK COMA DISTINTO DIV ENTERO ESCRIBIR FALSO FLOTANTE FSI HACER HASTA ID IGUAL LEER LLAVDER LLAVIZQ MAYOR MAYORIGUAL MENOR MENORIGUAL MIENTRAS MULT NO NUMERO O OR PARDER PARIZQ POTENCIA PROGRAMA PUNTOCOMA RESTA SI SINO SUMA VERDADERO Y\n    programa : PROGRAMA LLAVIZQ list_decl list_sent LLAVDER\n    \n    list_decl : list_decl decl\n              | decl\n              | empty\n    \n    decl : tipo list_id PUNTOCOMA\n    \n    tipo : ENTERO\n         | FLOTANTE\n         | BOOLEANO\n    \n    list_id : list_id COMA ID\n            | ID\n    \n    list_sent : list_sent sent\n              | sent\n              | empty\n    \n    sent : sent_if\n         | sent_while\n         | sent_do\n         | sent_read\n         | sent_write\n         | bloque\n         | sent_assign\n         | sent_break\n    \n    sent_if : SI PARIZQ exp_bool PARDER bloque SINO bloque FSI\n            | SI PARIZQ exp_bool PARDER bloque FSI\n    \n    sent_while : MIENTRAS PARIZQ exp_bool PARDER bloque\n    \n    sent_do : HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA\n    \n    sent_read : LEER ID PUNTOCOMA\n    \n    sent_write : ESCRIBIR exp_bool PUNTOCOMA\n    \n    bloque : LLAVIZQ list_sent LLAVDER\n    \n    sent_assign : ID ASIGNACION exp_bool PUNTOCOMA\n    \n    sent_break : BREAK PUNTOCOMA\n    \n    exp_bool : exp_bool OR comb\n             | comb\n    \n    comb : comb AND igualdad\n         | igualdad\n    \n    igualdad : igualdad IGUAL rel\n             | igualdad DISTINTO rel\n             | rel\n    \n    rel : expr op_rel expr\n        | expr\n    \n    op_rel : MENOR\n           | MENORIGUAL\n           | MAYOR\n           | MAYORIGUAL\n    \n    expr : expr SUMA term\n         | expr RESTA term\n         | term\n    \n    term : term MULT unario\n         | term DIV unario\n         | unario\n    \n    unario : NO unario\n           | RESTA unario\n           | factor\n    \n    factor : PARIZQ exp_bool PARDER\n           | ID\n           | NUMERO\n           | VERDADERO\n           | FALSO\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,34,],[0,-1,]),'LLAVIZQ':([2,3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,26,33,35,56,57,59,63,65,83,84,86,98,100,101,104,105,],[3,-58,11,-3,-4,11,11,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,11,11,-11,-30,-5,-28,-26,-27,11,11,-29,-24,11,-23,-25,-22,]),'ENTERO':([3,4,5,6,13,57,],[8,8,-3,-4,-2,-5,]),'FLOTANTE':([3,4,5,6,13,57,],[9,9,-3,-4,-2,-5,]),'BOOLEANO':([3,4,5,6,13,57,],[10,10,-3,-4,-2,-5,]),'SI':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,24,-3,-4,24,24,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,24,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'MIENTRAS':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,25,-3,-4,25,25,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,25,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'HACER':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,26,-3,-4,26,26,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,26,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'LEER':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,27,-3,-4,27,27,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,27,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'ESCRIBIR':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,29,-3,-4,29,29,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,29,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'ID':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,27,29,33,35,36,37,40,47,49,51,56,57,58,59,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,86,98,101,104,105,],[-58,28,-3,-4,32,-6,-7,-8,28,28,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,39,52,28,-11,52,52,52,52,52,52,-30,-5,82,-28,-26,-27,52,52,52,52,52,52,52,-40,-41,-42,-43,52,52,52,-29,-24,-23,-25,-22,]),'BREAK':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,30,-3,-4,30,30,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,30,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'LLAVDER':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,23,33,35,56,57,59,63,65,86,98,101,104,105,],[-58,-58,-3,-4,-58,34,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,59,-11,-30,-5,-28,-26,-27,-29,-24,-23,-25,-22,]),'PARIZQ':([24,25,29,36,37,40,47,49,51,62,66,67,68,69,70,71,72,73,74,75,76,77,78,85,],[36,37,51,51,51,51,51,51,51,85,51,51,51,51,51,51,51,-40,-41,-42,-43,51,51,51,]),'ASIGNACION':([28,],[40,]),'NO':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,78,85,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,-40,-41,-42,-43,49,49,49,]),'RESTA':([29,36,37,40,45,46,47,48,49,50,51,52,53,54,55,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,85,91,92,93,94,95,96,],[47,47,47,47,72,-46,47,-49,47,-52,47,-54,-55,-56,-57,47,47,47,47,47,47,47,-40,-41,-42,-43,47,47,-51,-50,47,72,-44,-45,-47,-48,-53,]),'NUMERO':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,78,85,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,-40,-41,-42,-43,53,53,53,]),'VERDADERO':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,78,85,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,-40,-41,-42,-43,54,54,54,]),'FALSO':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,73,74,75,76,77,78,85,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,-40,-41,-42,-43,55,55,55,]),'PUNTOCOMA':([30,31,32,39,41,42,43,44,45,46,48,50,52,53,54,55,64,79,80,82,87,88,89,90,91,92,93,94,95,96,102,],[56,57,-10,63,65,-32,-34,-37,-39,-46,-49,-52,-54,-55,-56,-57,86,-51,-50,-9,-31,-33,-35,-36,-38,-44,-45,-47,-48,-53,104,]),'COMA':([31,32,82,],[58,-10,-9,]),'HASTA':([38,59,],[62,-28,]),'OR':([41,42,43,44,45,46,48,50,52,53,54,55,60,61,64,79,80,81,87,88,89,90,91,92,93,94,95,96,99,],[66,-32,-34,-37,-39,-46,-49,-52,-54,-55,-56,-57,66,66,66,-51,-50,66,-31,-33,-35,-36,-38,-44,-45,-47,-48,-53,66,]),'PARDER':([42,43,44,45,46,48,50,52,53,54,55,60,61,79,80,81,87,88,89,90,91,92,93,94,95,96,99,],[-32,-34,-37,-39,-46,-49,-52,-54,-55,-56,-57,83,84,-51,-50,96,-31,-33,-35,-36,-38,-44,-45,-47,-48,-53,102,]),'AND':([42,43,44,45,46,48,50,52,53,54,55,79,80,87,88,89,90,91,92,93,94,95,96,],[67,-34,-37,-39,-46,-49,-52,-54,-55,-56,-57,-51,-50,67,-33,-35,-36,-38,-44,-45,-47,-48,-53,]),'IGUAL':([43,44,45,46,48,50,52,53,54,55,79,80,88,89,90,91,92,93,94,95,96,],[68,-37,-39,-46,-49,-52,-54,-55,-56,-57,-51,-50,68,-35,-36,-38,-44,-45,-47,-48,-53,]),'DISTINTO':([43,44,45,46,48,50,52,53,54,55,79,80,88,89,90,91,92,93,94,95,96,],[69,-37,-39,-46,-49,-52,-54,-55,-56,-57,-51,-50,69,-35,-36,-38,-44,-45,-47,-48,-53,]),'SUMA':([45,46,48,50,52,53,54,55,79,80,91,92,93,94,95,96,],[71,-46,-49,-52,-54,-55,-56,-57,-51,-50,71,-44,-45,-47,-48,-53,]),'MENOR':([45,46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[73,-46,-49,-52,-54,-55,-56,-57,-51,-50,-44,-45,-47,-48,-53,]),'MENORIGUAL':([45,46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[74,-46,-49,-52,-54,-55,-56,-57,-51,-50,-44,-45,-47,-48,-53,]),'MAYOR':([45,46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[75,-46,-49,-52,-54,-55,-56,-57,-51,-50,-44,-45,-47,-48,-53,]),'MAYORIGUAL':([45,46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[76,-46,-49,-52,-54,-55,-56,-57,-51,-50,-44,-45,-47,-48,-53,]),'MULT':([46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[77,-49,-52,-54,-55,-56,-57,-51,-50,77,77,-47,-48,-53,]),'DIV':([46,48,50,52,53,54,55,79,80,92,93,94,95,96,],[78,-49,-52,-54,-55,-56,-57,-51,-50,78,78,-47,-48,-53,]),'SINO':([59,97,],[-28,100,]),'FSI':([59,97,103,],[-28,101,105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'list_decl':([3,],[4,]),'decl':([3,4,],[5,13,]),'empty':([3,4,11,],[6,15,15,]),'tipo':([3,4,],[7,7,]),'list_sent':([4,11,],[12,33,]),'sent':([4,11,12,33,],[14,14,35,35,]),'sent_if':([4,11,12,33,],[16,16,16,16,]),'sent_while':([4,11,12,33,],[17,17,17,17,]),'sent_do':([4,11,12,33,],[18,18,18,18,]),'sent_read':([4,11,12,33,],[19,19,19,19,]),'sent_write':([4,11,12,33,],[20,20,20,20,]),'bloque':([4,11,12,26,33,83,84,100,],[21,21,21,38,21,97,98,103,]),'sent_assign':([4,11,12,33,],[22,22,22,22,]),'sent_break':([4,11,12,33,],[23,23,23,23,]),'list_id':([7,],[31,]),'exp_bool':([29,36,37,40,51,85,],[41,60,61,64,81,99,]),'comb':([29,36,37,40,51,66,85,],[42,42,42,42,42,87,42,]),'igualdad':([29,36,37,40,51,66,67,85,],[43,43,43,43,43,43,88,43,]),'rel':([29,36,37,40,51,66,67,68,69,85,],[44,44,44,44,44,44,44,89,90,44,]),'expr':([29,36,37,40,51,66,67,68,69,70,85,],[45,45,45,45,45,45,45,45,45,91,45,]),'term':([29,36,37,40,51,66,67,68,69,70,71,72,85,],[46,46,46,46,46,46,46,46,46,46,92,93,46,]),'unario':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,77,78,85,],[48,48,48,48,79,80,48,48,48,48,48,48,48,48,94,95,48,]),'factor':([29,36,37,40,47,49,51,66,67,68,69,70,71,72,77,78,85,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'op_rel':([45,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER','programa',5,'p_programa','sintactico.py',7),
  ('list_decl -> list_decl decl','list_decl',2,'p_list_decl','sintactico.py',13),
  ('list_decl -> decl','list_decl',1,'p_list_decl','sintactico.py',14),
  ('list_decl -> empty','list_decl',1,'p_list_decl','sintactico.py',15),
  ('decl -> tipo list_id PUNTOCOMA','decl',3,'p_decl','sintactico.py',26),
  ('tipo -> ENTERO','tipo',1,'p_tipo','sintactico.py',32),
  ('tipo -> FLOTANTE','tipo',1,'p_tipo','sintactico.py',33),
  ('tipo -> BOOLEANO','tipo',1,'p_tipo','sintactico.py',34),
  ('list_id -> list_id COMA ID','list_id',3,'p_list_id','sintactico.py',40),
  ('list_id -> ID','list_id',1,'p_list_id','sintactico.py',41),
  ('list_sent -> list_sent sent','list_sent',2,'p_list_sent','sintactico.py',50),
  ('list_sent -> sent','list_sent',1,'p_list_sent','sintactico.py',51),
  ('list_sent -> empty','list_sent',1,'p_list_sent','sintactico.py',52),
  ('sent -> sent_if','sent',1,'p_sent','sintactico.py',63),
  ('sent -> sent_while','sent',1,'p_sent','sintactico.py',64),
  ('sent -> sent_do','sent',1,'p_sent','sintactico.py',65),
  ('sent -> sent_read','sent',1,'p_sent','sintactico.py',66),
  ('sent -> sent_write','sent',1,'p_sent','sintactico.py',67),
  ('sent -> bloque','sent',1,'p_sent','sintactico.py',68),
  ('sent -> sent_assign','sent',1,'p_sent','sintactico.py',69),
  ('sent -> sent_break','sent',1,'p_sent','sintactico.py',70),
  ('sent_if -> SI PARIZQ exp_bool PARDER bloque SINO bloque FSI','sent_if',8,'p_sent_if','sintactico.py',76),
  ('sent_if -> SI PARIZQ exp_bool PARDER bloque FSI','sent_if',6,'p_sent_if','sintactico.py',77),
  ('sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque','sent_while',5,'p_sent_while','sintactico.py',86),
  ('sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA','sent_do',7,'p_sent_do','sintactico.py',92),
  ('sent_read -> LEER ID PUNTOCOMA','sent_read',3,'p_sent_read','sintactico.py',98),
  ('sent_write -> ESCRIBIR exp_bool PUNTOCOMA','sent_write',3,'p_sent_write','sintactico.py',104),
  ('bloque -> LLAVIZQ list_sent LLAVDER','bloque',3,'p_bloque','sintactico.py',110),
  ('sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA','sent_assign',4,'p_sent_assign','sintactico.py',116),
  ('sent_break -> BREAK PUNTOCOMA','sent_break',2,'p_sent_break','sintactico.py',122),
  ('exp_bool -> exp_bool OR comb','exp_bool',3,'p_exp_bool','sintactico.py',128),
  ('exp_bool -> comb','exp_bool',1,'p_exp_bool','sintactico.py',129),
  ('comb -> comb AND igualdad','comb',3,'p_comb','sintactico.py',138),
  ('comb -> igualdad','comb',1,'p_comb','sintactico.py',139),
  ('igualdad -> igualdad IGUAL rel','igualdad',3,'p_igualdad','sintactico.py',148),
  ('igualdad -> igualdad DISTINTO rel','igualdad',3,'p_igualdad','sintactico.py',149),
  ('igualdad -> rel','igualdad',1,'p_igualdad','sintactico.py',150),
  ('rel -> expr op_rel expr','rel',3,'p_rel','sintactico.py',162),
  ('rel -> expr','rel',1,'p_rel','sintactico.py',163),
  ('op_rel -> MENOR','op_rel',1,'p_op_rel','sintactico.py',172),
  ('op_rel -> MENORIGUAL','op_rel',1,'p_op_rel','sintactico.py',173),
  ('op_rel -> MAYOR','op_rel',1,'p_op_rel','sintactico.py',174),
  ('op_rel -> MAYORIGUAL','op_rel',1,'p_op_rel','sintactico.py',175),
  ('expr -> expr SUMA term','expr',3,'p_expr','sintactico.py',181),
  ('expr -> expr RESTA term','expr',3,'p_expr','sintactico.py',182),
  ('expr -> term','expr',1,'p_expr','sintactico.py',183),
  ('term -> term MULT unario','term',3,'p_term','sintactico.py',195),
  ('term -> term DIV unario','term',3,'p_term','sintactico.py',196),
  ('term -> unario','term',1,'p_term','sintactico.py',197),
  ('unario -> NO unario','unario',2,'p_unario','sintactico.py',209),
  ('unario -> RESTA unario','unario',2,'p_unario','sintactico.py',210),
  ('unario -> factor','unario',1,'p_unario','sintactico.py',211),
  ('factor -> PARIZQ exp_bool PARDER','factor',3,'p_factor','sintactico.py',223),
  ('factor -> ID','factor',1,'p_factor','sintactico.py',224),
  ('factor -> NUMERO','factor',1,'p_factor','sintactico.py',225),
  ('factor -> VERDADERO','factor',1,'p_factor','sintactico.py',226),
  ('factor -> FALSO','factor',1,'p_factor','sintactico.py',227),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',236),
]

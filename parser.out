Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    POTENCIA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER
Rule 2     list_decl -> decl list_decl
Rule 3     list_decl -> empty
Rule 4     decl -> tipo list_id PUNTOCOMA
Rule 5     tipo -> ENTERO
Rule 6     tipo -> FLOTANTE
Rule 7     tipo -> BOOLEANO
Rule 8     list_id -> ID COMA list_id
Rule 9     list_id -> ID
Rule 10    list_sent -> sent list_sent
Rule 11    list_sent -> empty
Rule 12    sent -> sent_if
Rule 13    sent -> sent_while
Rule 14    sent -> sent_do
Rule 15    sent -> sent_read
Rule 16    sent -> sent_write
Rule 17    sent -> bloque
Rule 18    sent -> sent_assign
Rule 19    sent -> sent_break
Rule 20    sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI
Rule 21    sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
Rule 22    sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque
Rule 23    sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
Rule 24    sent_read -> LEER ID PUNTOCOMA
Rule 25    sent_write -> ESCRIBIR exp_bool PUNTOCOMA
Rule 26    bloque -> LLAVIZQ list_sent LLAVDER
Rule 27    sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA
Rule 28    sent_break -> BREAK PUNTOCOMA
Rule 29    exp_bool -> exp_bool OR comb
Rule 30    exp_bool -> comb
Rule 31    comb -> comb AND igualdad
Rule 32    comb -> igualdad
Rule 33    igualdad -> igualdad IGUAL rel
Rule 34    igualdad -> igualdad DISTINTO rel
Rule 35    igualdad -> rel
Rule 36    rel -> expr MENOR expr
Rule 37    rel -> expr MAYOR expr
Rule 38    rel -> expr MENORIGUAL expr
Rule 39    rel -> expr MAYORIGUAL expr
Rule 40    rel -> expr
Rule 41    expr -> expr SUMA term
Rule 42    expr -> expr RESTA term
Rule 43    expr -> term
Rule 44    term -> term MULT unario
Rule 45    term -> term DIV unario
Rule 46    term -> unario
Rule 47    unario -> NO unario
Rule 48    unario -> RESTA unario
Rule 49    unario -> factor
Rule 50    factor -> PARIZQ exp_bool PARDER
Rule 51    factor -> ID
Rule 52    factor -> NUMERO
Rule 53    factor -> VERDADERO
Rule 54    factor -> FALSO
Rule 55    empty -> <empty>

Terminals, with rules where they appear

AND                  : 31
ASIGNACION           : 27
BOOLEANO             : 7
BREAK                : 28
COMA                 : 8
DISTINTO             : 34
DIV                  : 45
ENTERO               : 5
ESCRIBIR             : 25
FALSO                : 54
FLOTANTE             : 6
FSI                  : 20 21
HACER                : 23
HASTA                : 23
ID                   : 8 9 24 27 51
IGUAL                : 33
LEER                 : 24
LLAVDER              : 1 26
LLAVIZQ              : 1 26
MAYOR                : 37
MAYORIGUAL           : 39
MENOR                : 36
MENORIGUAL           : 38
MIENTRAS             : 22
MULT                 : 44
NO                   : 47
NUMERO               : 52
OR                   : 29
PARDER               : 20 21 22 23 50
PARIZQ               : 20 21 22 23 50
POTENCIA             : 
PROGRAMA             : 1
PUNTOCOMA            : 4 23 24 25 27 28
RESTA                : 42 48
SI                   : 20 21
SINO                 : 21
SUMA                 : 41
THEN                 : 20 21
VERDADERO            : 53
error                : 

Nonterminals, with rules where they appear

bloque               : 17 20 21 21 22 23
comb                 : 29 30 31
decl                 : 2
empty                : 3 11
exp_bool             : 20 21 22 23 25 27 29 50
expr                 : 36 36 37 37 38 38 39 39 40 41 42
factor               : 49
igualdad             : 31 32 33 34
list_decl            : 1 2
list_id              : 4 8
list_sent            : 1 10 26
programa             : 0
rel                  : 33 34 35
sent                 : 10
sent_assign          : 18
sent_break           : 19
sent_do              : 14
sent_if              : 12
sent_read            : 15
sent_while           : 13
sent_write           : 16
term                 : 41 42 43 44 45
tipo                 : 4
unario               : 44 45 46 47 48

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA LLAVIZQ list_decl list_sent LLAVDER

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . LLAVIZQ list_decl list_sent LLAVDER

    LLAVIZQ         shift and go to state 3


state 3

    (1) programa -> PROGRAMA LLAVIZQ . list_decl list_sent LLAVDER
    (2) list_decl -> . decl list_decl
    (3) list_decl -> . empty
    (4) decl -> . tipo list_id PUNTOCOMA
    (55) empty -> .
    (5) tipo -> . ENTERO
    (6) tipo -> . FLOTANTE
    (7) tipo -> . BOOLEANO

    SI              reduce using rule 55 (empty -> .)
    MIENTRAS        reduce using rule 55 (empty -> .)
    HACER           reduce using rule 55 (empty -> .)
    LEER            reduce using rule 55 (empty -> .)
    ESCRIBIR        reduce using rule 55 (empty -> .)
    LLAVIZQ         reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)
    BREAK           reduce using rule 55 (empty -> .)
    LLAVDER         reduce using rule 55 (empty -> .)
    ENTERO          shift and go to state 8
    FLOTANTE        shift and go to state 9
    BOOLEANO        shift and go to state 10

    list_decl                      shift and go to state 4
    decl                           shift and go to state 5
    empty                          shift and go to state 6
    tipo                           shift and go to state 7

state 4

    (1) programa -> PROGRAMA LLAVIZQ list_decl . list_sent LLAVDER
    (10) list_sent -> . sent list_sent
    (11) list_sent -> . empty
    (12) sent -> . sent_if
    (13) sent -> . sent_while
    (14) sent -> . sent_do
    (15) sent -> . sent_read
    (16) sent -> . sent_write
    (17) sent -> . bloque
    (18) sent -> . sent_assign
    (19) sent -> . sent_break
    (55) empty -> .
    (20) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (21) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (22) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (23) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (24) sent_read -> . LEER ID PUNTOCOMA
    (25) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (26) bloque -> . LLAVIZQ list_sent LLAVDER
    (27) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (28) sent_break -> . BREAK PUNTOCOMA

    LLAVDER         reduce using rule 55 (empty -> .)
    SI              shift and go to state 23
    MIENTRAS        shift and go to state 24
    HACER           shift and go to state 25
    LEER            shift and go to state 26
    ESCRIBIR        shift and go to state 28
    LLAVIZQ         shift and go to state 11
    ID              shift and go to state 27
    BREAK           shift and go to state 29

    list_sent                      shift and go to state 12
    sent                           shift and go to state 13
    empty                          shift and go to state 14
    sent_if                        shift and go to state 15
    sent_while                     shift and go to state 16
    sent_do                        shift and go to state 17
    sent_read                      shift and go to state 18
    sent_write                     shift and go to state 19
    bloque                         shift and go to state 20
    sent_assign                    shift and go to state 21
    sent_break                     shift and go to state 22

state 5

    (2) list_decl -> decl . list_decl
    (2) list_decl -> . decl list_decl
    (3) list_decl -> . empty
    (4) decl -> . tipo list_id PUNTOCOMA
    (55) empty -> .
    (5) tipo -> . ENTERO
    (6) tipo -> . FLOTANTE
    (7) tipo -> . BOOLEANO

    SI              reduce using rule 55 (empty -> .)
    MIENTRAS        reduce using rule 55 (empty -> .)
    HACER           reduce using rule 55 (empty -> .)
    LEER            reduce using rule 55 (empty -> .)
    ESCRIBIR        reduce using rule 55 (empty -> .)
    LLAVIZQ         reduce using rule 55 (empty -> .)
    ID              reduce using rule 55 (empty -> .)
    BREAK           reduce using rule 55 (empty -> .)
    LLAVDER         reduce using rule 55 (empty -> .)
    ENTERO          shift and go to state 8
    FLOTANTE        shift and go to state 9
    BOOLEANO        shift and go to state 10

    decl                           shift and go to state 5
    list_decl                      shift and go to state 30
    empty                          shift and go to state 6
    tipo                           shift and go to state 7

state 6

    (3) list_decl -> empty .

    SI              reduce using rule 3 (list_decl -> empty .)
    MIENTRAS        reduce using rule 3 (list_decl -> empty .)
    HACER           reduce using rule 3 (list_decl -> empty .)
    LEER            reduce using rule 3 (list_decl -> empty .)
    ESCRIBIR        reduce using rule 3 (list_decl -> empty .)
    LLAVIZQ         reduce using rule 3 (list_decl -> empty .)
    ID              reduce using rule 3 (list_decl -> empty .)
    BREAK           reduce using rule 3 (list_decl -> empty .)
    LLAVDER         reduce using rule 3 (list_decl -> empty .)


state 7

    (4) decl -> tipo . list_id PUNTOCOMA
    (8) list_id -> . ID COMA list_id
    (9) list_id -> . ID

    ID              shift and go to state 32

    list_id                        shift and go to state 31

state 8

    (5) tipo -> ENTERO .

    ID              reduce using rule 5 (tipo -> ENTERO .)


state 9

    (6) tipo -> FLOTANTE .

    ID              reduce using rule 6 (tipo -> FLOTANTE .)


state 10

    (7) tipo -> BOOLEANO .

    ID              reduce using rule 7 (tipo -> BOOLEANO .)


state 11

    (26) bloque -> LLAVIZQ . list_sent LLAVDER
    (10) list_sent -> . sent list_sent
    (11) list_sent -> . empty
    (12) sent -> . sent_if
    (13) sent -> . sent_while
    (14) sent -> . sent_do
    (15) sent -> . sent_read
    (16) sent -> . sent_write
    (17) sent -> . bloque
    (18) sent -> . sent_assign
    (19) sent -> . sent_break
    (55) empty -> .
    (20) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (21) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (22) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (23) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (24) sent_read -> . LEER ID PUNTOCOMA
    (25) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (26) bloque -> . LLAVIZQ list_sent LLAVDER
    (27) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (28) sent_break -> . BREAK PUNTOCOMA

    LLAVDER         reduce using rule 55 (empty -> .)
    SI              shift and go to state 23
    MIENTRAS        shift and go to state 24
    HACER           shift and go to state 25
    LEER            shift and go to state 26
    ESCRIBIR        shift and go to state 28
    LLAVIZQ         shift and go to state 11
    ID              shift and go to state 27
    BREAK           shift and go to state 29

    list_sent                      shift and go to state 33
    sent                           shift and go to state 13
    empty                          shift and go to state 14
    sent_if                        shift and go to state 15
    sent_while                     shift and go to state 16
    sent_do                        shift and go to state 17
    sent_read                      shift and go to state 18
    sent_write                     shift and go to state 19
    bloque                         shift and go to state 20
    sent_assign                    shift and go to state 21
    sent_break                     shift and go to state 22

state 12

    (1) programa -> PROGRAMA LLAVIZQ list_decl list_sent . LLAVDER

    LLAVDER         shift and go to state 34


state 13

    (10) list_sent -> sent . list_sent
    (10) list_sent -> . sent list_sent
    (11) list_sent -> . empty
    (12) sent -> . sent_if
    (13) sent -> . sent_while
    (14) sent -> . sent_do
    (15) sent -> . sent_read
    (16) sent -> . sent_write
    (17) sent -> . bloque
    (18) sent -> . sent_assign
    (19) sent -> . sent_break
    (55) empty -> .
    (20) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (21) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (22) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (23) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (24) sent_read -> . LEER ID PUNTOCOMA
    (25) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (26) bloque -> . LLAVIZQ list_sent LLAVDER
    (27) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (28) sent_break -> . BREAK PUNTOCOMA

    LLAVDER         reduce using rule 55 (empty -> .)
    SI              shift and go to state 23
    MIENTRAS        shift and go to state 24
    HACER           shift and go to state 25
    LEER            shift and go to state 26
    ESCRIBIR        shift and go to state 28
    LLAVIZQ         shift and go to state 11
    ID              shift and go to state 27
    BREAK           shift and go to state 29

    sent                           shift and go to state 13
    list_sent                      shift and go to state 35
    empty                          shift and go to state 14
    sent_if                        shift and go to state 15
    sent_while                     shift and go to state 16
    sent_do                        shift and go to state 17
    sent_read                      shift and go to state 18
    sent_write                     shift and go to state 19
    bloque                         shift and go to state 20
    sent_assign                    shift and go to state 21
    sent_break                     shift and go to state 22

state 14

    (11) list_sent -> empty .

    LLAVDER         reduce using rule 11 (list_sent -> empty .)


state 15

    (12) sent -> sent_if .

    SI              reduce using rule 12 (sent -> sent_if .)
    MIENTRAS        reduce using rule 12 (sent -> sent_if .)
    HACER           reduce using rule 12 (sent -> sent_if .)
    LEER            reduce using rule 12 (sent -> sent_if .)
    ESCRIBIR        reduce using rule 12 (sent -> sent_if .)
    LLAVIZQ         reduce using rule 12 (sent -> sent_if .)
    ID              reduce using rule 12 (sent -> sent_if .)
    BREAK           reduce using rule 12 (sent -> sent_if .)
    LLAVDER         reduce using rule 12 (sent -> sent_if .)


state 16

    (13) sent -> sent_while .

    SI              reduce using rule 13 (sent -> sent_while .)
    MIENTRAS        reduce using rule 13 (sent -> sent_while .)
    HACER           reduce using rule 13 (sent -> sent_while .)
    LEER            reduce using rule 13 (sent -> sent_while .)
    ESCRIBIR        reduce using rule 13 (sent -> sent_while .)
    LLAVIZQ         reduce using rule 13 (sent -> sent_while .)
    ID              reduce using rule 13 (sent -> sent_while .)
    BREAK           reduce using rule 13 (sent -> sent_while .)
    LLAVDER         reduce using rule 13 (sent -> sent_while .)


state 17

    (14) sent -> sent_do .

    SI              reduce using rule 14 (sent -> sent_do .)
    MIENTRAS        reduce using rule 14 (sent -> sent_do .)
    HACER           reduce using rule 14 (sent -> sent_do .)
    LEER            reduce using rule 14 (sent -> sent_do .)
    ESCRIBIR        reduce using rule 14 (sent -> sent_do .)
    LLAVIZQ         reduce using rule 14 (sent -> sent_do .)
    ID              reduce using rule 14 (sent -> sent_do .)
    BREAK           reduce using rule 14 (sent -> sent_do .)
    LLAVDER         reduce using rule 14 (sent -> sent_do .)


state 18

    (15) sent -> sent_read .

    SI              reduce using rule 15 (sent -> sent_read .)
    MIENTRAS        reduce using rule 15 (sent -> sent_read .)
    HACER           reduce using rule 15 (sent -> sent_read .)
    LEER            reduce using rule 15 (sent -> sent_read .)
    ESCRIBIR        reduce using rule 15 (sent -> sent_read .)
    LLAVIZQ         reduce using rule 15 (sent -> sent_read .)
    ID              reduce using rule 15 (sent -> sent_read .)
    BREAK           reduce using rule 15 (sent -> sent_read .)
    LLAVDER         reduce using rule 15 (sent -> sent_read .)


state 19

    (16) sent -> sent_write .

    SI              reduce using rule 16 (sent -> sent_write .)
    MIENTRAS        reduce using rule 16 (sent -> sent_write .)
    HACER           reduce using rule 16 (sent -> sent_write .)
    LEER            reduce using rule 16 (sent -> sent_write .)
    ESCRIBIR        reduce using rule 16 (sent -> sent_write .)
    LLAVIZQ         reduce using rule 16 (sent -> sent_write .)
    ID              reduce using rule 16 (sent -> sent_write .)
    BREAK           reduce using rule 16 (sent -> sent_write .)
    LLAVDER         reduce using rule 16 (sent -> sent_write .)


state 20

    (17) sent -> bloque .

    SI              reduce using rule 17 (sent -> bloque .)
    MIENTRAS        reduce using rule 17 (sent -> bloque .)
    HACER           reduce using rule 17 (sent -> bloque .)
    LEER            reduce using rule 17 (sent -> bloque .)
    ESCRIBIR        reduce using rule 17 (sent -> bloque .)
    LLAVIZQ         reduce using rule 17 (sent -> bloque .)
    ID              reduce using rule 17 (sent -> bloque .)
    BREAK           reduce using rule 17 (sent -> bloque .)
    LLAVDER         reduce using rule 17 (sent -> bloque .)


state 21

    (18) sent -> sent_assign .

    SI              reduce using rule 18 (sent -> sent_assign .)
    MIENTRAS        reduce using rule 18 (sent -> sent_assign .)
    HACER           reduce using rule 18 (sent -> sent_assign .)
    LEER            reduce using rule 18 (sent -> sent_assign .)
    ESCRIBIR        reduce using rule 18 (sent -> sent_assign .)
    LLAVIZQ         reduce using rule 18 (sent -> sent_assign .)
    ID              reduce using rule 18 (sent -> sent_assign .)
    BREAK           reduce using rule 18 (sent -> sent_assign .)
    LLAVDER         reduce using rule 18 (sent -> sent_assign .)


state 22

    (19) sent -> sent_break .

    SI              reduce using rule 19 (sent -> sent_break .)
    MIENTRAS        reduce using rule 19 (sent -> sent_break .)
    HACER           reduce using rule 19 (sent -> sent_break .)
    LEER            reduce using rule 19 (sent -> sent_break .)
    ESCRIBIR        reduce using rule 19 (sent -> sent_break .)
    LLAVIZQ         reduce using rule 19 (sent -> sent_break .)
    ID              reduce using rule 19 (sent -> sent_break .)
    BREAK           reduce using rule 19 (sent -> sent_break .)
    LLAVDER         reduce using rule 19 (sent -> sent_break .)


state 23

    (20) sent_if -> SI . PARIZQ exp_bool PARDER THEN bloque FSI
    (21) sent_if -> SI . PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI

    PARIZQ          shift and go to state 36


state 24

    (22) sent_while -> MIENTRAS . PARIZQ exp_bool PARDER bloque

    PARIZQ          shift and go to state 37


state 25

    (23) sent_do -> HACER . bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (26) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 11

    bloque                         shift and go to state 38

state 26

    (24) sent_read -> LEER . ID PUNTOCOMA

    ID              shift and go to state 39


state 27

    (27) sent_assign -> ID . ASIGNACION exp_bool PUNTOCOMA

    ASIGNACION      shift and go to state 40


state 28

    (25) sent_write -> ESCRIBIR . exp_bool PUNTOCOMA
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 41
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 29

    (28) sent_break -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 56


state 30

    (2) list_decl -> decl list_decl .

    SI              reduce using rule 2 (list_decl -> decl list_decl .)
    MIENTRAS        reduce using rule 2 (list_decl -> decl list_decl .)
    HACER           reduce using rule 2 (list_decl -> decl list_decl .)
    LEER            reduce using rule 2 (list_decl -> decl list_decl .)
    ESCRIBIR        reduce using rule 2 (list_decl -> decl list_decl .)
    LLAVIZQ         reduce using rule 2 (list_decl -> decl list_decl .)
    ID              reduce using rule 2 (list_decl -> decl list_decl .)
    BREAK           reduce using rule 2 (list_decl -> decl list_decl .)
    LLAVDER         reduce using rule 2 (list_decl -> decl list_decl .)


state 31

    (4) decl -> tipo list_id . PUNTOCOMA

    PUNTOCOMA       shift and go to state 57


state 32

    (8) list_id -> ID . COMA list_id
    (9) list_id -> ID .

    COMA            shift and go to state 58
    PUNTOCOMA       reduce using rule 9 (list_id -> ID .)


state 33

    (26) bloque -> LLAVIZQ list_sent . LLAVDER

    LLAVDER         shift and go to state 59


state 34

    (1) programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER .

    $end            reduce using rule 1 (programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER .)


state 35

    (10) list_sent -> sent list_sent .

    LLAVDER         reduce using rule 10 (list_sent -> sent list_sent .)


state 36

    (20) sent_if -> SI PARIZQ . exp_bool PARDER THEN bloque FSI
    (21) sent_if -> SI PARIZQ . exp_bool PARDER THEN bloque SINO bloque FSI
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 60
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 37

    (22) sent_while -> MIENTRAS PARIZQ . exp_bool PARDER bloque
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 61
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 38

    (23) sent_do -> HACER bloque . HASTA PARIZQ exp_bool PARDER PUNTOCOMA

    HASTA           shift and go to state 62


state 39

    (24) sent_read -> LEER ID . PUNTOCOMA

    PUNTOCOMA       shift and go to state 63


state 40

    (27) sent_assign -> ID ASIGNACION . exp_bool PUNTOCOMA
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 64
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 41

    (25) sent_write -> ESCRIBIR exp_bool . PUNTOCOMA
    (29) exp_bool -> exp_bool . OR comb

    PUNTOCOMA       shift and go to state 65
    OR              shift and go to state 66


state 42

    (30) exp_bool -> comb .
    (31) comb -> comb . AND igualdad

    PUNTOCOMA       reduce using rule 30 (exp_bool -> comb .)
    OR              reduce using rule 30 (exp_bool -> comb .)
    PARDER          reduce using rule 30 (exp_bool -> comb .)
    AND             shift and go to state 67


state 43

    (32) comb -> igualdad .
    (33) igualdad -> igualdad . IGUAL rel
    (34) igualdad -> igualdad . DISTINTO rel

    AND             reduce using rule 32 (comb -> igualdad .)
    PUNTOCOMA       reduce using rule 32 (comb -> igualdad .)
    OR              reduce using rule 32 (comb -> igualdad .)
    PARDER          reduce using rule 32 (comb -> igualdad .)
    IGUAL           shift and go to state 68
    DISTINTO        shift and go to state 69


state 44

    (35) igualdad -> rel .

    IGUAL           reduce using rule 35 (igualdad -> rel .)
    DISTINTO        reduce using rule 35 (igualdad -> rel .)
    AND             reduce using rule 35 (igualdad -> rel .)
    PUNTOCOMA       reduce using rule 35 (igualdad -> rel .)
    OR              reduce using rule 35 (igualdad -> rel .)
    PARDER          reduce using rule 35 (igualdad -> rel .)


state 45

    (36) rel -> expr . MENOR expr
    (37) rel -> expr . MAYOR expr
    (38) rel -> expr . MENORIGUAL expr
    (39) rel -> expr . MAYORIGUAL expr
    (40) rel -> expr .
    (41) expr -> expr . SUMA term
    (42) expr -> expr . RESTA term

    MENOR           shift and go to state 70
    MAYOR           shift and go to state 71
    MENORIGUAL      shift and go to state 72
    MAYORIGUAL      shift and go to state 73
    IGUAL           reduce using rule 40 (rel -> expr .)
    DISTINTO        reduce using rule 40 (rel -> expr .)
    AND             reduce using rule 40 (rel -> expr .)
    PUNTOCOMA       reduce using rule 40 (rel -> expr .)
    OR              reduce using rule 40 (rel -> expr .)
    PARDER          reduce using rule 40 (rel -> expr .)
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75


state 46

    (43) expr -> term .
    (44) term -> term . MULT unario
    (45) term -> term . DIV unario

    MENOR           reduce using rule 43 (expr -> term .)
    MAYOR           reduce using rule 43 (expr -> term .)
    MENORIGUAL      reduce using rule 43 (expr -> term .)
    MAYORIGUAL      reduce using rule 43 (expr -> term .)
    SUMA            reduce using rule 43 (expr -> term .)
    RESTA           reduce using rule 43 (expr -> term .)
    IGUAL           reduce using rule 43 (expr -> term .)
    DISTINTO        reduce using rule 43 (expr -> term .)
    AND             reduce using rule 43 (expr -> term .)
    PUNTOCOMA       reduce using rule 43 (expr -> term .)
    OR              reduce using rule 43 (expr -> term .)
    PARDER          reduce using rule 43 (expr -> term .)
    MULT            shift and go to state 76
    DIV             shift and go to state 77


state 47

    (48) unario -> RESTA . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    unario                         shift and go to state 78
    factor                         shift and go to state 50

state 48

    (46) term -> unario .

    MULT            reduce using rule 46 (term -> unario .)
    DIV             reduce using rule 46 (term -> unario .)
    MENOR           reduce using rule 46 (term -> unario .)
    MAYOR           reduce using rule 46 (term -> unario .)
    MENORIGUAL      reduce using rule 46 (term -> unario .)
    MAYORIGUAL      reduce using rule 46 (term -> unario .)
    SUMA            reduce using rule 46 (term -> unario .)
    RESTA           reduce using rule 46 (term -> unario .)
    IGUAL           reduce using rule 46 (term -> unario .)
    DISTINTO        reduce using rule 46 (term -> unario .)
    AND             reduce using rule 46 (term -> unario .)
    PUNTOCOMA       reduce using rule 46 (term -> unario .)
    OR              reduce using rule 46 (term -> unario .)
    PARDER          reduce using rule 46 (term -> unario .)


state 49

    (47) unario -> NO . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    unario                         shift and go to state 79
    factor                         shift and go to state 50

state 50

    (49) unario -> factor .

    MULT            reduce using rule 49 (unario -> factor .)
    DIV             reduce using rule 49 (unario -> factor .)
    MENOR           reduce using rule 49 (unario -> factor .)
    MAYOR           reduce using rule 49 (unario -> factor .)
    MENORIGUAL      reduce using rule 49 (unario -> factor .)
    MAYORIGUAL      reduce using rule 49 (unario -> factor .)
    SUMA            reduce using rule 49 (unario -> factor .)
    RESTA           reduce using rule 49 (unario -> factor .)
    IGUAL           reduce using rule 49 (unario -> factor .)
    DISTINTO        reduce using rule 49 (unario -> factor .)
    AND             reduce using rule 49 (unario -> factor .)
    PUNTOCOMA       reduce using rule 49 (unario -> factor .)
    OR              reduce using rule 49 (unario -> factor .)
    PARDER          reduce using rule 49 (unario -> factor .)


state 51

    (50) factor -> PARIZQ . exp_bool PARDER
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 80
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 52

    (51) factor -> ID .

    MULT            reduce using rule 51 (factor -> ID .)
    DIV             reduce using rule 51 (factor -> ID .)
    MENOR           reduce using rule 51 (factor -> ID .)
    MAYOR           reduce using rule 51 (factor -> ID .)
    MENORIGUAL      reduce using rule 51 (factor -> ID .)
    MAYORIGUAL      reduce using rule 51 (factor -> ID .)
    SUMA            reduce using rule 51 (factor -> ID .)
    RESTA           reduce using rule 51 (factor -> ID .)
    IGUAL           reduce using rule 51 (factor -> ID .)
    DISTINTO        reduce using rule 51 (factor -> ID .)
    AND             reduce using rule 51 (factor -> ID .)
    PUNTOCOMA       reduce using rule 51 (factor -> ID .)
    OR              reduce using rule 51 (factor -> ID .)
    PARDER          reduce using rule 51 (factor -> ID .)


state 53

    (52) factor -> NUMERO .

    MULT            reduce using rule 52 (factor -> NUMERO .)
    DIV             reduce using rule 52 (factor -> NUMERO .)
    MENOR           reduce using rule 52 (factor -> NUMERO .)
    MAYOR           reduce using rule 52 (factor -> NUMERO .)
    MENORIGUAL      reduce using rule 52 (factor -> NUMERO .)
    MAYORIGUAL      reduce using rule 52 (factor -> NUMERO .)
    SUMA            reduce using rule 52 (factor -> NUMERO .)
    RESTA           reduce using rule 52 (factor -> NUMERO .)
    IGUAL           reduce using rule 52 (factor -> NUMERO .)
    DISTINTO        reduce using rule 52 (factor -> NUMERO .)
    AND             reduce using rule 52 (factor -> NUMERO .)
    PUNTOCOMA       reduce using rule 52 (factor -> NUMERO .)
    OR              reduce using rule 52 (factor -> NUMERO .)
    PARDER          reduce using rule 52 (factor -> NUMERO .)


state 54

    (53) factor -> VERDADERO .

    MULT            reduce using rule 53 (factor -> VERDADERO .)
    DIV             reduce using rule 53 (factor -> VERDADERO .)
    MENOR           reduce using rule 53 (factor -> VERDADERO .)
    MAYOR           reduce using rule 53 (factor -> VERDADERO .)
    MENORIGUAL      reduce using rule 53 (factor -> VERDADERO .)
    MAYORIGUAL      reduce using rule 53 (factor -> VERDADERO .)
    SUMA            reduce using rule 53 (factor -> VERDADERO .)
    RESTA           reduce using rule 53 (factor -> VERDADERO .)
    IGUAL           reduce using rule 53 (factor -> VERDADERO .)
    DISTINTO        reduce using rule 53 (factor -> VERDADERO .)
    AND             reduce using rule 53 (factor -> VERDADERO .)
    PUNTOCOMA       reduce using rule 53 (factor -> VERDADERO .)
    OR              reduce using rule 53 (factor -> VERDADERO .)
    PARDER          reduce using rule 53 (factor -> VERDADERO .)


state 55

    (54) factor -> FALSO .

    MULT            reduce using rule 54 (factor -> FALSO .)
    DIV             reduce using rule 54 (factor -> FALSO .)
    MENOR           reduce using rule 54 (factor -> FALSO .)
    MAYOR           reduce using rule 54 (factor -> FALSO .)
    MENORIGUAL      reduce using rule 54 (factor -> FALSO .)
    MAYORIGUAL      reduce using rule 54 (factor -> FALSO .)
    SUMA            reduce using rule 54 (factor -> FALSO .)
    RESTA           reduce using rule 54 (factor -> FALSO .)
    IGUAL           reduce using rule 54 (factor -> FALSO .)
    DISTINTO        reduce using rule 54 (factor -> FALSO .)
    AND             reduce using rule 54 (factor -> FALSO .)
    PUNTOCOMA       reduce using rule 54 (factor -> FALSO .)
    OR              reduce using rule 54 (factor -> FALSO .)
    PARDER          reduce using rule 54 (factor -> FALSO .)


state 56

    (28) sent_break -> BREAK PUNTOCOMA .

    SI              reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    MIENTRAS        reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    HACER           reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    LEER            reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    ESCRIBIR        reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    LLAVIZQ         reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    ID              reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 28 (sent_break -> BREAK PUNTOCOMA .)


state 57

    (4) decl -> tipo list_id PUNTOCOMA .

    ENTERO          reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    FLOTANTE        reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    BOOLEANO        reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    SI              reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    MIENTRAS        reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    HACER           reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    LEER            reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    ESCRIBIR        reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    LLAVIZQ         reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    ID              reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    BREAK           reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)
    LLAVDER         reduce using rule 4 (decl -> tipo list_id PUNTOCOMA .)


state 58

    (8) list_id -> ID COMA . list_id
    (8) list_id -> . ID COMA list_id
    (9) list_id -> . ID

    ID              shift and go to state 32

    list_id                        shift and go to state 81

state 59

    (26) bloque -> LLAVIZQ list_sent LLAVDER .

    SI              reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    MIENTRAS        reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    HACER           reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LEER            reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    ESCRIBIR        reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LLAVIZQ         reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    ID              reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    BREAK           reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LLAVDER         reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    HASTA           reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    FSI             reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)
    SINO            reduce using rule 26 (bloque -> LLAVIZQ list_sent LLAVDER .)


state 60

    (20) sent_if -> SI PARIZQ exp_bool . PARDER THEN bloque FSI
    (21) sent_if -> SI PARIZQ exp_bool . PARDER THEN bloque SINO bloque FSI
    (29) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 82
    OR              shift and go to state 66


state 61

    (22) sent_while -> MIENTRAS PARIZQ exp_bool . PARDER bloque
    (29) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 83
    OR              shift and go to state 66


state 62

    (23) sent_do -> HACER bloque HASTA . PARIZQ exp_bool PARDER PUNTOCOMA

    PARIZQ          shift and go to state 84


state 63

    (24) sent_read -> LEER ID PUNTOCOMA .

    SI              reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    MIENTRAS        reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    HACER           reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    LEER            reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    ESCRIBIR        reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    LLAVIZQ         reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    ID              reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    BREAK           reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)
    LLAVDER         reduce using rule 24 (sent_read -> LEER ID PUNTOCOMA .)


state 64

    (27) sent_assign -> ID ASIGNACION exp_bool . PUNTOCOMA
    (29) exp_bool -> exp_bool . OR comb

    PUNTOCOMA       shift and go to state 85
    OR              shift and go to state 66


state 65

    (25) sent_write -> ESCRIBIR exp_bool PUNTOCOMA .

    SI              reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    MIENTRAS        reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    HACER           reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LEER            reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    ESCRIBIR        reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LLAVIZQ         reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    ID              reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    BREAK           reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LLAVDER         reduce using rule 25 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)


state 66

    (29) exp_bool -> exp_bool OR . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    comb                           shift and go to state 86
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 67

    (31) comb -> comb AND . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    igualdad                       shift and go to state 87
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 68

    (33) igualdad -> igualdad IGUAL . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    rel                            shift and go to state 88
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 69

    (34) igualdad -> igualdad DISTINTO . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    rel                            shift and go to state 89
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 70

    (36) rel -> expr MENOR . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    expr                           shift and go to state 90
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 71

    (37) rel -> expr MAYOR . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    expr                           shift and go to state 91
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 72

    (38) rel -> expr MENORIGUAL . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    expr                           shift and go to state 92
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 73

    (39) rel -> expr MAYORIGUAL . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    expr                           shift and go to state 93
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 74

    (41) expr -> expr SUMA . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    term                           shift and go to state 94
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 75

    (42) expr -> expr RESTA . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    term                           shift and go to state 95
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 76

    (44) term -> term MULT . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    unario                         shift and go to state 96
    factor                         shift and go to state 50

state 77

    (45) term -> term DIV . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    unario                         shift and go to state 97
    factor                         shift and go to state 50

state 78

    (48) unario -> RESTA unario .

    MULT            reduce using rule 48 (unario -> RESTA unario .)
    DIV             reduce using rule 48 (unario -> RESTA unario .)
    MENOR           reduce using rule 48 (unario -> RESTA unario .)
    MAYOR           reduce using rule 48 (unario -> RESTA unario .)
    MENORIGUAL      reduce using rule 48 (unario -> RESTA unario .)
    MAYORIGUAL      reduce using rule 48 (unario -> RESTA unario .)
    SUMA            reduce using rule 48 (unario -> RESTA unario .)
    RESTA           reduce using rule 48 (unario -> RESTA unario .)
    IGUAL           reduce using rule 48 (unario -> RESTA unario .)
    DISTINTO        reduce using rule 48 (unario -> RESTA unario .)
    AND             reduce using rule 48 (unario -> RESTA unario .)
    PUNTOCOMA       reduce using rule 48 (unario -> RESTA unario .)
    OR              reduce using rule 48 (unario -> RESTA unario .)
    PARDER          reduce using rule 48 (unario -> RESTA unario .)


state 79

    (47) unario -> NO unario .

    MULT            reduce using rule 47 (unario -> NO unario .)
    DIV             reduce using rule 47 (unario -> NO unario .)
    MENOR           reduce using rule 47 (unario -> NO unario .)
    MAYOR           reduce using rule 47 (unario -> NO unario .)
    MENORIGUAL      reduce using rule 47 (unario -> NO unario .)
    MAYORIGUAL      reduce using rule 47 (unario -> NO unario .)
    SUMA            reduce using rule 47 (unario -> NO unario .)
    RESTA           reduce using rule 47 (unario -> NO unario .)
    IGUAL           reduce using rule 47 (unario -> NO unario .)
    DISTINTO        reduce using rule 47 (unario -> NO unario .)
    AND             reduce using rule 47 (unario -> NO unario .)
    PUNTOCOMA       reduce using rule 47 (unario -> NO unario .)
    OR              reduce using rule 47 (unario -> NO unario .)
    PARDER          reduce using rule 47 (unario -> NO unario .)


state 80

    (50) factor -> PARIZQ exp_bool . PARDER
    (29) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 98
    OR              shift and go to state 66


state 81

    (8) list_id -> ID COMA list_id .

    PUNTOCOMA       reduce using rule 8 (list_id -> ID COMA list_id .)


state 82

    (20) sent_if -> SI PARIZQ exp_bool PARDER . THEN bloque FSI
    (21) sent_if -> SI PARIZQ exp_bool PARDER . THEN bloque SINO bloque FSI

    THEN            shift and go to state 99


state 83

    (22) sent_while -> MIENTRAS PARIZQ exp_bool PARDER . bloque
    (26) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 11

    bloque                         shift and go to state 100

state 84

    (23) sent_do -> HACER bloque HASTA PARIZQ . exp_bool PARDER PUNTOCOMA
    (29) exp_bool -> . exp_bool OR comb
    (30) exp_bool -> . comb
    (31) comb -> . comb AND igualdad
    (32) comb -> . igualdad
    (33) igualdad -> . igualdad IGUAL rel
    (34) igualdad -> . igualdad DISTINTO rel
    (35) igualdad -> . rel
    (36) rel -> . expr MENOR expr
    (37) rel -> . expr MAYOR expr
    (38) rel -> . expr MENORIGUAL expr
    (39) rel -> . expr MAYORIGUAL expr
    (40) rel -> . expr
    (41) expr -> . expr SUMA term
    (42) expr -> . expr RESTA term
    (43) expr -> . term
    (44) term -> . term MULT unario
    (45) term -> . term DIV unario
    (46) term -> . unario
    (47) unario -> . NO unario
    (48) unario -> . RESTA unario
    (49) unario -> . factor
    (50) factor -> . PARIZQ exp_bool PARDER
    (51) factor -> . ID
    (52) factor -> . NUMERO
    (53) factor -> . VERDADERO
    (54) factor -> . FALSO

    NO              shift and go to state 49
    RESTA           shift and go to state 47
    PARIZQ          shift and go to state 51
    ID              shift and go to state 52
    NUMERO          shift and go to state 53
    VERDADERO       shift and go to state 54
    FALSO           shift and go to state 55

    exp_bool                       shift and go to state 101
    comb                           shift and go to state 42
    igualdad                       shift and go to state 43
    rel                            shift and go to state 44
    expr                           shift and go to state 45
    term                           shift and go to state 46
    unario                         shift and go to state 48
    factor                         shift and go to state 50

state 85

    (27) sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .

    SI              reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    MIENTRAS        reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    HACER           reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LEER            reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    ESCRIBIR        reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LLAVIZQ         reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    ID              reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    BREAK           reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LLAVDER         reduce using rule 27 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)


state 86

    (29) exp_bool -> exp_bool OR comb .
    (31) comb -> comb . AND igualdad

    PUNTOCOMA       reduce using rule 29 (exp_bool -> exp_bool OR comb .)
    OR              reduce using rule 29 (exp_bool -> exp_bool OR comb .)
    PARDER          reduce using rule 29 (exp_bool -> exp_bool OR comb .)
    AND             shift and go to state 67


state 87

    (31) comb -> comb AND igualdad .
    (33) igualdad -> igualdad . IGUAL rel
    (34) igualdad -> igualdad . DISTINTO rel

    AND             reduce using rule 31 (comb -> comb AND igualdad .)
    PUNTOCOMA       reduce using rule 31 (comb -> comb AND igualdad .)
    OR              reduce using rule 31 (comb -> comb AND igualdad .)
    PARDER          reduce using rule 31 (comb -> comb AND igualdad .)
    IGUAL           shift and go to state 68
    DISTINTO        shift and go to state 69


state 88

    (33) igualdad -> igualdad IGUAL rel .

    IGUAL           reduce using rule 33 (igualdad -> igualdad IGUAL rel .)
    DISTINTO        reduce using rule 33 (igualdad -> igualdad IGUAL rel .)
    AND             reduce using rule 33 (igualdad -> igualdad IGUAL rel .)
    PUNTOCOMA       reduce using rule 33 (igualdad -> igualdad IGUAL rel .)
    OR              reduce using rule 33 (igualdad -> igualdad IGUAL rel .)
    PARDER          reduce using rule 33 (igualdad -> igualdad IGUAL rel .)


state 89

    (34) igualdad -> igualdad DISTINTO rel .

    IGUAL           reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)
    DISTINTO        reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)
    AND             reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)
    PUNTOCOMA       reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)
    OR              reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)
    PARDER          reduce using rule 34 (igualdad -> igualdad DISTINTO rel .)


state 90

    (36) rel -> expr MENOR expr .
    (41) expr -> expr . SUMA term
    (42) expr -> expr . RESTA term

    IGUAL           reduce using rule 36 (rel -> expr MENOR expr .)
    DISTINTO        reduce using rule 36 (rel -> expr MENOR expr .)
    AND             reduce using rule 36 (rel -> expr MENOR expr .)
    PUNTOCOMA       reduce using rule 36 (rel -> expr MENOR expr .)
    OR              reduce using rule 36 (rel -> expr MENOR expr .)
    PARDER          reduce using rule 36 (rel -> expr MENOR expr .)
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75


state 91

    (37) rel -> expr MAYOR expr .
    (41) expr -> expr . SUMA term
    (42) expr -> expr . RESTA term

    IGUAL           reduce using rule 37 (rel -> expr MAYOR expr .)
    DISTINTO        reduce using rule 37 (rel -> expr MAYOR expr .)
    AND             reduce using rule 37 (rel -> expr MAYOR expr .)
    PUNTOCOMA       reduce using rule 37 (rel -> expr MAYOR expr .)
    OR              reduce using rule 37 (rel -> expr MAYOR expr .)
    PARDER          reduce using rule 37 (rel -> expr MAYOR expr .)
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75


state 92

    (38) rel -> expr MENORIGUAL expr .
    (41) expr -> expr . SUMA term
    (42) expr -> expr . RESTA term

    IGUAL           reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    DISTINTO        reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    AND             reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    PUNTOCOMA       reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    OR              reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    PARDER          reduce using rule 38 (rel -> expr MENORIGUAL expr .)
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75


state 93

    (39) rel -> expr MAYORIGUAL expr .
    (41) expr -> expr . SUMA term
    (42) expr -> expr . RESTA term

    IGUAL           reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    DISTINTO        reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    AND             reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    PUNTOCOMA       reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    OR              reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    PARDER          reduce using rule 39 (rel -> expr MAYORIGUAL expr .)
    SUMA            shift and go to state 74
    RESTA           shift and go to state 75


state 94

    (41) expr -> expr SUMA term .
    (44) term -> term . MULT unario
    (45) term -> term . DIV unario

    MENOR           reduce using rule 41 (expr -> expr SUMA term .)
    MAYOR           reduce using rule 41 (expr -> expr SUMA term .)
    MENORIGUAL      reduce using rule 41 (expr -> expr SUMA term .)
    MAYORIGUAL      reduce using rule 41 (expr -> expr SUMA term .)
    SUMA            reduce using rule 41 (expr -> expr SUMA term .)
    RESTA           reduce using rule 41 (expr -> expr SUMA term .)
    IGUAL           reduce using rule 41 (expr -> expr SUMA term .)
    DISTINTO        reduce using rule 41 (expr -> expr SUMA term .)
    AND             reduce using rule 41 (expr -> expr SUMA term .)
    PUNTOCOMA       reduce using rule 41 (expr -> expr SUMA term .)
    OR              reduce using rule 41 (expr -> expr SUMA term .)
    PARDER          reduce using rule 41 (expr -> expr SUMA term .)
    MULT            shift and go to state 76
    DIV             shift and go to state 77


state 95

    (42) expr -> expr RESTA term .
    (44) term -> term . MULT unario
    (45) term -> term . DIV unario

    MENOR           reduce using rule 42 (expr -> expr RESTA term .)
    MAYOR           reduce using rule 42 (expr -> expr RESTA term .)
    MENORIGUAL      reduce using rule 42 (expr -> expr RESTA term .)
    MAYORIGUAL      reduce using rule 42 (expr -> expr RESTA term .)
    SUMA            reduce using rule 42 (expr -> expr RESTA term .)
    RESTA           reduce using rule 42 (expr -> expr RESTA term .)
    IGUAL           reduce using rule 42 (expr -> expr RESTA term .)
    DISTINTO        reduce using rule 42 (expr -> expr RESTA term .)
    AND             reduce using rule 42 (expr -> expr RESTA term .)
    PUNTOCOMA       reduce using rule 42 (expr -> expr RESTA term .)
    OR              reduce using rule 42 (expr -> expr RESTA term .)
    PARDER          reduce using rule 42 (expr -> expr RESTA term .)
    MULT            shift and go to state 76
    DIV             shift and go to state 77


state 96

    (44) term -> term MULT unario .

    MULT            reduce using rule 44 (term -> term MULT unario .)
    DIV             reduce using rule 44 (term -> term MULT unario .)
    MENOR           reduce using rule 44 (term -> term MULT unario .)
    MAYOR           reduce using rule 44 (term -> term MULT unario .)
    MENORIGUAL      reduce using rule 44 (term -> term MULT unario .)
    MAYORIGUAL      reduce using rule 44 (term -> term MULT unario .)
    SUMA            reduce using rule 44 (term -> term MULT unario .)
    RESTA           reduce using rule 44 (term -> term MULT unario .)
    IGUAL           reduce using rule 44 (term -> term MULT unario .)
    DISTINTO        reduce using rule 44 (term -> term MULT unario .)
    AND             reduce using rule 44 (term -> term MULT unario .)
    PUNTOCOMA       reduce using rule 44 (term -> term MULT unario .)
    OR              reduce using rule 44 (term -> term MULT unario .)
    PARDER          reduce using rule 44 (term -> term MULT unario .)


state 97

    (45) term -> term DIV unario .

    MULT            reduce using rule 45 (term -> term DIV unario .)
    DIV             reduce using rule 45 (term -> term DIV unario .)
    MENOR           reduce using rule 45 (term -> term DIV unario .)
    MAYOR           reduce using rule 45 (term -> term DIV unario .)
    MENORIGUAL      reduce using rule 45 (term -> term DIV unario .)
    MAYORIGUAL      reduce using rule 45 (term -> term DIV unario .)
    SUMA            reduce using rule 45 (term -> term DIV unario .)
    RESTA           reduce using rule 45 (term -> term DIV unario .)
    IGUAL           reduce using rule 45 (term -> term DIV unario .)
    DISTINTO        reduce using rule 45 (term -> term DIV unario .)
    AND             reduce using rule 45 (term -> term DIV unario .)
    PUNTOCOMA       reduce using rule 45 (term -> term DIV unario .)
    OR              reduce using rule 45 (term -> term DIV unario .)
    PARDER          reduce using rule 45 (term -> term DIV unario .)


state 98

    (50) factor -> PARIZQ exp_bool PARDER .

    MULT            reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    DIV             reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    MENOR           reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    MAYOR           reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    MENORIGUAL      reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    MAYORIGUAL      reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    SUMA            reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    RESTA           reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    IGUAL           reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    DISTINTO        reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    AND             reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    PUNTOCOMA       reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    OR              reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)
    PARDER          reduce using rule 50 (factor -> PARIZQ exp_bool PARDER .)


state 99

    (20) sent_if -> SI PARIZQ exp_bool PARDER THEN . bloque FSI
    (21) sent_if -> SI PARIZQ exp_bool PARDER THEN . bloque SINO bloque FSI
    (26) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 11

    bloque                         shift and go to state 102

state 100

    (22) sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .

    SI              reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    MIENTRAS        reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    HACER           reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LEER            reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    ESCRIBIR        reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LLAVIZQ         reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    ID              reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    BREAK           reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LLAVDER         reduce using rule 22 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)


state 101

    (23) sent_do -> HACER bloque HASTA PARIZQ exp_bool . PARDER PUNTOCOMA
    (29) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 103
    OR              shift and go to state 66


state 102

    (20) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque . FSI
    (21) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque . SINO bloque FSI

    FSI             shift and go to state 104
    SINO            shift and go to state 105


state 103

    (23) sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 106


state 104

    (20) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .

    SI              reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    MIENTRAS        reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    HACER           reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LEER            reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    ESCRIBIR        reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LLAVIZQ         reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    ID              reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    BREAK           reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LLAVDER         reduce using rule 20 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)


state 105

    (21) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO . bloque FSI
    (26) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 11

    bloque                         shift and go to state 107

state 106

    (23) sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .

    SI              reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    MIENTRAS        reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    HACER           reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LEER            reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    ESCRIBIR        reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LLAVIZQ         reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    ID              reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    BREAK           reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 23 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)


state 107

    (21) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque . FSI

    FSI             shift and go to state 108


state 108

    (21) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .

    SI              reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    MIENTRAS        reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    HACER           reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LEER            reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    ESCRIBIR        reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LLAVIZQ         reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    ID              reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    BREAK           reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LLAVDER         reduce using rule 21 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)


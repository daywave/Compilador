Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    POTENCIA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER
Rule 2     programa -> error LLAVDER
Rule 3     list_decl -> decl list_decl
Rule 4     list_decl -> empty
Rule 5     decl -> tipo list_id PUNTOCOMA
Rule 6     tipo -> ENTERO
Rule 7     tipo -> FLOTANTE
Rule 8     tipo -> BOOLEANO
Rule 9     list_id -> ID COMA list_id
Rule 10    list_id -> ID
Rule 11    list_sent -> sent list_sent
Rule 12    list_sent -> empty
Rule 13    list_sent -> error PUNTOCOMA list_sent
Rule 14    sent -> sent_if
Rule 15    sent -> sent_while
Rule 16    sent -> sent_do
Rule 17    sent -> sent_read
Rule 18    sent -> sent_write
Rule 19    sent -> bloque
Rule 20    sent -> sent_assign
Rule 21    sent -> sent_break
Rule 22    sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI
Rule 23    sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
Rule 24    sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque
Rule 25    sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
Rule 26    sent_read -> LEER ID PUNTOCOMA
Rule 27    sent_write -> ESCRIBIR exp_bool PUNTOCOMA
Rule 28    bloque -> LLAVIZQ list_sent LLAVDER
Rule 29    sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA
Rule 30    sent_break -> BREAK PUNTOCOMA
Rule 31    exp_bool -> exp_bool OR comb
Rule 32    exp_bool -> comb
Rule 33    comb -> comb AND igualdad
Rule 34    comb -> igualdad
Rule 35    igualdad -> igualdad IGUAL rel
Rule 36    igualdad -> igualdad DISTINTO rel
Rule 37    igualdad -> rel
Rule 38    rel -> expr MENOR expr
Rule 39    rel -> expr MAYOR expr
Rule 40    rel -> expr MENORIGUAL expr
Rule 41    rel -> expr MAYORIGUAL expr
Rule 42    rel -> expr
Rule 43    expr -> expr SUMA term
Rule 44    expr -> expr RESTA term
Rule 45    expr -> term
Rule 46    term -> term MULT unario
Rule 47    term -> term DIV unario
Rule 48    term -> unario
Rule 49    unario -> NO unario
Rule 50    unario -> RESTA unario
Rule 51    unario -> factor
Rule 52    factor -> PARIZQ exp_bool PARDER
Rule 53    factor -> ID
Rule 54    factor -> NUMERO
Rule 55    factor -> VERDADERO
Rule 56    factor -> FALSO
Rule 57    empty -> <empty>

Terminals, with rules where they appear

AND                  : 33
ASIGNACION           : 29
BOOLEANO             : 8
BREAK                : 30
COMA                 : 9
DISTINTO             : 36
DIV                  : 47
ENTERO               : 6
ESCRIBIR             : 27
FALSO                : 56
FLOTANTE             : 7
FSI                  : 22 23
HACER                : 25
HASTA                : 25
ID                   : 9 10 26 29 53
IGUAL                : 35
LEER                 : 26
LLAVDER              : 1 2 28
LLAVIZQ              : 1 28
MAYOR                : 39
MAYORIGUAL           : 41
MENOR                : 38
MENORIGUAL           : 40
MIENTRAS             : 24
MULT                 : 46
NO                   : 49
NUMERO               : 54
OR                   : 31
PARDER               : 22 23 24 25 52
PARIZQ               : 22 23 24 25 52
POTENCIA             : 
PROGRAMA             : 1
PUNTOCOMA            : 5 13 25 26 27 29 30
RESTA                : 44 50
SI                   : 22 23
SINO                 : 23
SUMA                 : 43
THEN                 : 22 23
VERDADERO            : 55
error                : 2 13

Nonterminals, with rules where they appear

bloque               : 19 22 23 23 24 25
comb                 : 31 32 33
decl                 : 3
empty                : 4 12
exp_bool             : 22 23 24 25 27 29 31 52
expr                 : 38 38 39 39 40 40 41 41 42 43 44
factor               : 51
igualdad             : 33 34 35 36
list_decl            : 1 3
list_id              : 5 9
list_sent            : 1 11 13 28
programa             : 0
rel                  : 35 36 37
sent                 : 11
sent_assign          : 20
sent_break           : 21
sent_do              : 16
sent_if              : 14
sent_read            : 17
sent_while           : 15
sent_write           : 18
term                 : 43 44 45 46 47
tipo                 : 5
unario               : 46 47 48 49 50

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAMA LLAVIZQ list_decl list_sent LLAVDER
    (2) programa -> . error LLAVDER

    PROGRAMA        shift and go to state 2
    error           shift and go to state 3

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAMA . LLAVIZQ list_decl list_sent LLAVDER

    LLAVIZQ         shift and go to state 4


state 3

    (2) programa -> error . LLAVDER

    LLAVDER         shift and go to state 5


state 4

    (1) programa -> PROGRAMA LLAVIZQ . list_decl list_sent LLAVDER
    (3) list_decl -> . decl list_decl
    (4) list_decl -> . empty
    (5) decl -> . tipo list_id PUNTOCOMA
    (57) empty -> .
    (6) tipo -> . ENTERO
    (7) tipo -> . FLOTANTE
    (8) tipo -> . BOOLEANO

    error           reduce using rule 57 (empty -> .)
    SI              reduce using rule 57 (empty -> .)
    MIENTRAS        reduce using rule 57 (empty -> .)
    HACER           reduce using rule 57 (empty -> .)
    LEER            reduce using rule 57 (empty -> .)
    ESCRIBIR        reduce using rule 57 (empty -> .)
    LLAVIZQ         reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    BREAK           reduce using rule 57 (empty -> .)
    LLAVDER         reduce using rule 57 (empty -> .)
    ENTERO          shift and go to state 10
    FLOTANTE        shift and go to state 11
    BOOLEANO        shift and go to state 12

    list_decl                      shift and go to state 6
    decl                           shift and go to state 7
    empty                          shift and go to state 8
    tipo                           shift and go to state 9

state 5

    (2) programa -> error LLAVDER .

    $end            reduce using rule 2 (programa -> error LLAVDER .)


state 6

    (1) programa -> PROGRAMA LLAVIZQ list_decl . list_sent LLAVDER
    (11) list_sent -> . sent list_sent
    (12) list_sent -> . empty
    (13) list_sent -> . error PUNTOCOMA list_sent
    (14) sent -> . sent_if
    (15) sent -> . sent_while
    (16) sent -> . sent_do
    (17) sent -> . sent_read
    (18) sent -> . sent_write
    (19) sent -> . bloque
    (20) sent -> . sent_assign
    (21) sent -> . sent_break
    (57) empty -> .
    (22) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (23) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (24) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (25) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (26) sent_read -> . LEER ID PUNTOCOMA
    (27) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (28) bloque -> . LLAVIZQ list_sent LLAVDER
    (29) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (30) sent_break -> . BREAK PUNTOCOMA

    error           shift and go to state 17
    LLAVDER         reduce using rule 57 (empty -> .)
    SI              shift and go to state 26
    MIENTRAS        shift and go to state 27
    HACER           shift and go to state 28
    LEER            shift and go to state 29
    ESCRIBIR        shift and go to state 31
    LLAVIZQ         shift and go to state 13
    ID              shift and go to state 30
    BREAK           shift and go to state 32

    list_sent                      shift and go to state 14
    sent                           shift and go to state 15
    empty                          shift and go to state 16
    sent_if                        shift and go to state 18
    sent_while                     shift and go to state 19
    sent_do                        shift and go to state 20
    sent_read                      shift and go to state 21
    sent_write                     shift and go to state 22
    bloque                         shift and go to state 23
    sent_assign                    shift and go to state 24
    sent_break                     shift and go to state 25

state 7

    (3) list_decl -> decl . list_decl
    (3) list_decl -> . decl list_decl
    (4) list_decl -> . empty
    (5) decl -> . tipo list_id PUNTOCOMA
    (57) empty -> .
    (6) tipo -> . ENTERO
    (7) tipo -> . FLOTANTE
    (8) tipo -> . BOOLEANO

    error           reduce using rule 57 (empty -> .)
    SI              reduce using rule 57 (empty -> .)
    MIENTRAS        reduce using rule 57 (empty -> .)
    HACER           reduce using rule 57 (empty -> .)
    LEER            reduce using rule 57 (empty -> .)
    ESCRIBIR        reduce using rule 57 (empty -> .)
    LLAVIZQ         reduce using rule 57 (empty -> .)
    ID              reduce using rule 57 (empty -> .)
    BREAK           reduce using rule 57 (empty -> .)
    LLAVDER         reduce using rule 57 (empty -> .)
    ENTERO          shift and go to state 10
    FLOTANTE        shift and go to state 11
    BOOLEANO        shift and go to state 12

    decl                           shift and go to state 7
    list_decl                      shift and go to state 33
    empty                          shift and go to state 8
    tipo                           shift and go to state 9

state 8

    (4) list_decl -> empty .

    error           reduce using rule 4 (list_decl -> empty .)
    SI              reduce using rule 4 (list_decl -> empty .)
    MIENTRAS        reduce using rule 4 (list_decl -> empty .)
    HACER           reduce using rule 4 (list_decl -> empty .)
    LEER            reduce using rule 4 (list_decl -> empty .)
    ESCRIBIR        reduce using rule 4 (list_decl -> empty .)
    LLAVIZQ         reduce using rule 4 (list_decl -> empty .)
    ID              reduce using rule 4 (list_decl -> empty .)
    BREAK           reduce using rule 4 (list_decl -> empty .)
    LLAVDER         reduce using rule 4 (list_decl -> empty .)


state 9

    (5) decl -> tipo . list_id PUNTOCOMA
    (9) list_id -> . ID COMA list_id
    (10) list_id -> . ID

    ID              shift and go to state 35

    list_id                        shift and go to state 34

state 10

    (6) tipo -> ENTERO .

    ID              reduce using rule 6 (tipo -> ENTERO .)


state 11

    (7) tipo -> FLOTANTE .

    ID              reduce using rule 7 (tipo -> FLOTANTE .)


state 12

    (8) tipo -> BOOLEANO .

    ID              reduce using rule 8 (tipo -> BOOLEANO .)


state 13

    (28) bloque -> LLAVIZQ . list_sent LLAVDER
    (11) list_sent -> . sent list_sent
    (12) list_sent -> . empty
    (13) list_sent -> . error PUNTOCOMA list_sent
    (14) sent -> . sent_if
    (15) sent -> . sent_while
    (16) sent -> . sent_do
    (17) sent -> . sent_read
    (18) sent -> . sent_write
    (19) sent -> . bloque
    (20) sent -> . sent_assign
    (21) sent -> . sent_break
    (57) empty -> .
    (22) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (23) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (24) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (25) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (26) sent_read -> . LEER ID PUNTOCOMA
    (27) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (28) bloque -> . LLAVIZQ list_sent LLAVDER
    (29) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (30) sent_break -> . BREAK PUNTOCOMA

    error           shift and go to state 17
    LLAVDER         reduce using rule 57 (empty -> .)
    SI              shift and go to state 26
    MIENTRAS        shift and go to state 27
    HACER           shift and go to state 28
    LEER            shift and go to state 29
    ESCRIBIR        shift and go to state 31
    LLAVIZQ         shift and go to state 13
    ID              shift and go to state 30
    BREAK           shift and go to state 32

    list_sent                      shift and go to state 36
    sent                           shift and go to state 15
    empty                          shift and go to state 16
    sent_if                        shift and go to state 18
    sent_while                     shift and go to state 19
    sent_do                        shift and go to state 20
    sent_read                      shift and go to state 21
    sent_write                     shift and go to state 22
    bloque                         shift and go to state 23
    sent_assign                    shift and go to state 24
    sent_break                     shift and go to state 25

state 14

    (1) programa -> PROGRAMA LLAVIZQ list_decl list_sent . LLAVDER

    LLAVDER         shift and go to state 37


state 15

    (11) list_sent -> sent . list_sent
    (11) list_sent -> . sent list_sent
    (12) list_sent -> . empty
    (13) list_sent -> . error PUNTOCOMA list_sent
    (14) sent -> . sent_if
    (15) sent -> . sent_while
    (16) sent -> . sent_do
    (17) sent -> . sent_read
    (18) sent -> . sent_write
    (19) sent -> . bloque
    (20) sent -> . sent_assign
    (21) sent -> . sent_break
    (57) empty -> .
    (22) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (23) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (24) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (25) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (26) sent_read -> . LEER ID PUNTOCOMA
    (27) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (28) bloque -> . LLAVIZQ list_sent LLAVDER
    (29) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (30) sent_break -> . BREAK PUNTOCOMA

    error           shift and go to state 17
    LLAVDER         reduce using rule 57 (empty -> .)
    SI              shift and go to state 26
    MIENTRAS        shift and go to state 27
    HACER           shift and go to state 28
    LEER            shift and go to state 29
    ESCRIBIR        shift and go to state 31
    LLAVIZQ         shift and go to state 13
    ID              shift and go to state 30
    BREAK           shift and go to state 32

    sent                           shift and go to state 15
    list_sent                      shift and go to state 38
    empty                          shift and go to state 16
    sent_if                        shift and go to state 18
    sent_while                     shift and go to state 19
    sent_do                        shift and go to state 20
    sent_read                      shift and go to state 21
    sent_write                     shift and go to state 22
    bloque                         shift and go to state 23
    sent_assign                    shift and go to state 24
    sent_break                     shift and go to state 25

state 16

    (12) list_sent -> empty .

    LLAVDER         reduce using rule 12 (list_sent -> empty .)


state 17

    (13) list_sent -> error . PUNTOCOMA list_sent

    PUNTOCOMA       shift and go to state 39


state 18

    (14) sent -> sent_if .

    error           reduce using rule 14 (sent -> sent_if .)
    SI              reduce using rule 14 (sent -> sent_if .)
    MIENTRAS        reduce using rule 14 (sent -> sent_if .)
    HACER           reduce using rule 14 (sent -> sent_if .)
    LEER            reduce using rule 14 (sent -> sent_if .)
    ESCRIBIR        reduce using rule 14 (sent -> sent_if .)
    LLAVIZQ         reduce using rule 14 (sent -> sent_if .)
    ID              reduce using rule 14 (sent -> sent_if .)
    BREAK           reduce using rule 14 (sent -> sent_if .)
    LLAVDER         reduce using rule 14 (sent -> sent_if .)


state 19

    (15) sent -> sent_while .

    error           reduce using rule 15 (sent -> sent_while .)
    SI              reduce using rule 15 (sent -> sent_while .)
    MIENTRAS        reduce using rule 15 (sent -> sent_while .)
    HACER           reduce using rule 15 (sent -> sent_while .)
    LEER            reduce using rule 15 (sent -> sent_while .)
    ESCRIBIR        reduce using rule 15 (sent -> sent_while .)
    LLAVIZQ         reduce using rule 15 (sent -> sent_while .)
    ID              reduce using rule 15 (sent -> sent_while .)
    BREAK           reduce using rule 15 (sent -> sent_while .)
    LLAVDER         reduce using rule 15 (sent -> sent_while .)


state 20

    (16) sent -> sent_do .

    error           reduce using rule 16 (sent -> sent_do .)
    SI              reduce using rule 16 (sent -> sent_do .)
    MIENTRAS        reduce using rule 16 (sent -> sent_do .)
    HACER           reduce using rule 16 (sent -> sent_do .)
    LEER            reduce using rule 16 (sent -> sent_do .)
    ESCRIBIR        reduce using rule 16 (sent -> sent_do .)
    LLAVIZQ         reduce using rule 16 (sent -> sent_do .)
    ID              reduce using rule 16 (sent -> sent_do .)
    BREAK           reduce using rule 16 (sent -> sent_do .)
    LLAVDER         reduce using rule 16 (sent -> sent_do .)


state 21

    (17) sent -> sent_read .

    error           reduce using rule 17 (sent -> sent_read .)
    SI              reduce using rule 17 (sent -> sent_read .)
    MIENTRAS        reduce using rule 17 (sent -> sent_read .)
    HACER           reduce using rule 17 (sent -> sent_read .)
    LEER            reduce using rule 17 (sent -> sent_read .)
    ESCRIBIR        reduce using rule 17 (sent -> sent_read .)
    LLAVIZQ         reduce using rule 17 (sent -> sent_read .)
    ID              reduce using rule 17 (sent -> sent_read .)
    BREAK           reduce using rule 17 (sent -> sent_read .)
    LLAVDER         reduce using rule 17 (sent -> sent_read .)


state 22

    (18) sent -> sent_write .

    error           reduce using rule 18 (sent -> sent_write .)
    SI              reduce using rule 18 (sent -> sent_write .)
    MIENTRAS        reduce using rule 18 (sent -> sent_write .)
    HACER           reduce using rule 18 (sent -> sent_write .)
    LEER            reduce using rule 18 (sent -> sent_write .)
    ESCRIBIR        reduce using rule 18 (sent -> sent_write .)
    LLAVIZQ         reduce using rule 18 (sent -> sent_write .)
    ID              reduce using rule 18 (sent -> sent_write .)
    BREAK           reduce using rule 18 (sent -> sent_write .)
    LLAVDER         reduce using rule 18 (sent -> sent_write .)


state 23

    (19) sent -> bloque .

    error           reduce using rule 19 (sent -> bloque .)
    SI              reduce using rule 19 (sent -> bloque .)
    MIENTRAS        reduce using rule 19 (sent -> bloque .)
    HACER           reduce using rule 19 (sent -> bloque .)
    LEER            reduce using rule 19 (sent -> bloque .)
    ESCRIBIR        reduce using rule 19 (sent -> bloque .)
    LLAVIZQ         reduce using rule 19 (sent -> bloque .)
    ID              reduce using rule 19 (sent -> bloque .)
    BREAK           reduce using rule 19 (sent -> bloque .)
    LLAVDER         reduce using rule 19 (sent -> bloque .)


state 24

    (20) sent -> sent_assign .

    error           reduce using rule 20 (sent -> sent_assign .)
    SI              reduce using rule 20 (sent -> sent_assign .)
    MIENTRAS        reduce using rule 20 (sent -> sent_assign .)
    HACER           reduce using rule 20 (sent -> sent_assign .)
    LEER            reduce using rule 20 (sent -> sent_assign .)
    ESCRIBIR        reduce using rule 20 (sent -> sent_assign .)
    LLAVIZQ         reduce using rule 20 (sent -> sent_assign .)
    ID              reduce using rule 20 (sent -> sent_assign .)
    BREAK           reduce using rule 20 (sent -> sent_assign .)
    LLAVDER         reduce using rule 20 (sent -> sent_assign .)


state 25

    (21) sent -> sent_break .

    error           reduce using rule 21 (sent -> sent_break .)
    SI              reduce using rule 21 (sent -> sent_break .)
    MIENTRAS        reduce using rule 21 (sent -> sent_break .)
    HACER           reduce using rule 21 (sent -> sent_break .)
    LEER            reduce using rule 21 (sent -> sent_break .)
    ESCRIBIR        reduce using rule 21 (sent -> sent_break .)
    LLAVIZQ         reduce using rule 21 (sent -> sent_break .)
    ID              reduce using rule 21 (sent -> sent_break .)
    BREAK           reduce using rule 21 (sent -> sent_break .)
    LLAVDER         reduce using rule 21 (sent -> sent_break .)


state 26

    (22) sent_if -> SI . PARIZQ exp_bool PARDER THEN bloque FSI
    (23) sent_if -> SI . PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI

    PARIZQ          shift and go to state 40


state 27

    (24) sent_while -> MIENTRAS . PARIZQ exp_bool PARDER bloque

    PARIZQ          shift and go to state 41


state 28

    (25) sent_do -> HACER . bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (28) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 13

    bloque                         shift and go to state 42

state 29

    (26) sent_read -> LEER . ID PUNTOCOMA

    ID              shift and go to state 43


state 30

    (29) sent_assign -> ID . ASIGNACION exp_bool PUNTOCOMA

    ASIGNACION      shift and go to state 44


state 31

    (27) sent_write -> ESCRIBIR . exp_bool PUNTOCOMA
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 45
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 32

    (30) sent_break -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 60


state 33

    (3) list_decl -> decl list_decl .

    error           reduce using rule 3 (list_decl -> decl list_decl .)
    SI              reduce using rule 3 (list_decl -> decl list_decl .)
    MIENTRAS        reduce using rule 3 (list_decl -> decl list_decl .)
    HACER           reduce using rule 3 (list_decl -> decl list_decl .)
    LEER            reduce using rule 3 (list_decl -> decl list_decl .)
    ESCRIBIR        reduce using rule 3 (list_decl -> decl list_decl .)
    LLAVIZQ         reduce using rule 3 (list_decl -> decl list_decl .)
    ID              reduce using rule 3 (list_decl -> decl list_decl .)
    BREAK           reduce using rule 3 (list_decl -> decl list_decl .)
    LLAVDER         reduce using rule 3 (list_decl -> decl list_decl .)


state 34

    (5) decl -> tipo list_id . PUNTOCOMA

    PUNTOCOMA       shift and go to state 61


state 35

    (9) list_id -> ID . COMA list_id
    (10) list_id -> ID .

    COMA            shift and go to state 62
    PUNTOCOMA       reduce using rule 10 (list_id -> ID .)


state 36

    (28) bloque -> LLAVIZQ list_sent . LLAVDER

    LLAVDER         shift and go to state 63


state 37

    (1) programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER .

    $end            reduce using rule 1 (programa -> PROGRAMA LLAVIZQ list_decl list_sent LLAVDER .)


state 38

    (11) list_sent -> sent list_sent .

    LLAVDER         reduce using rule 11 (list_sent -> sent list_sent .)


state 39

    (13) list_sent -> error PUNTOCOMA . list_sent
    (11) list_sent -> . sent list_sent
    (12) list_sent -> . empty
    (13) list_sent -> . error PUNTOCOMA list_sent
    (14) sent -> . sent_if
    (15) sent -> . sent_while
    (16) sent -> . sent_do
    (17) sent -> . sent_read
    (18) sent -> . sent_write
    (19) sent -> . bloque
    (20) sent -> . sent_assign
    (21) sent -> . sent_break
    (57) empty -> .
    (22) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque FSI
    (23) sent_if -> . SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI
    (24) sent_while -> . MIENTRAS PARIZQ exp_bool PARDER bloque
    (25) sent_do -> . HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA
    (26) sent_read -> . LEER ID PUNTOCOMA
    (27) sent_write -> . ESCRIBIR exp_bool PUNTOCOMA
    (28) bloque -> . LLAVIZQ list_sent LLAVDER
    (29) sent_assign -> . ID ASIGNACION exp_bool PUNTOCOMA
    (30) sent_break -> . BREAK PUNTOCOMA

    error           shift and go to state 17
    LLAVDER         reduce using rule 57 (empty -> .)
    SI              shift and go to state 26
    MIENTRAS        shift and go to state 27
    HACER           shift and go to state 28
    LEER            shift and go to state 29
    ESCRIBIR        shift and go to state 31
    LLAVIZQ         shift and go to state 13
    ID              shift and go to state 30
    BREAK           shift and go to state 32

    list_sent                      shift and go to state 64
    sent                           shift and go to state 15
    empty                          shift and go to state 16
    sent_if                        shift and go to state 18
    sent_while                     shift and go to state 19
    sent_do                        shift and go to state 20
    sent_read                      shift and go to state 21
    sent_write                     shift and go to state 22
    bloque                         shift and go to state 23
    sent_assign                    shift and go to state 24
    sent_break                     shift and go to state 25

state 40

    (22) sent_if -> SI PARIZQ . exp_bool PARDER THEN bloque FSI
    (23) sent_if -> SI PARIZQ . exp_bool PARDER THEN bloque SINO bloque FSI
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 65
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 41

    (24) sent_while -> MIENTRAS PARIZQ . exp_bool PARDER bloque
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 66
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 42

    (25) sent_do -> HACER bloque . HASTA PARIZQ exp_bool PARDER PUNTOCOMA

    HASTA           shift and go to state 67


state 43

    (26) sent_read -> LEER ID . PUNTOCOMA

    PUNTOCOMA       shift and go to state 68


state 44

    (29) sent_assign -> ID ASIGNACION . exp_bool PUNTOCOMA
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 69
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 45

    (27) sent_write -> ESCRIBIR exp_bool . PUNTOCOMA
    (31) exp_bool -> exp_bool . OR comb

    PUNTOCOMA       shift and go to state 70
    OR              shift and go to state 71


state 46

    (32) exp_bool -> comb .
    (33) comb -> comb . AND igualdad

    PUNTOCOMA       reduce using rule 32 (exp_bool -> comb .)
    OR              reduce using rule 32 (exp_bool -> comb .)
    PARDER          reduce using rule 32 (exp_bool -> comb .)
    AND             shift and go to state 72


state 47

    (34) comb -> igualdad .
    (35) igualdad -> igualdad . IGUAL rel
    (36) igualdad -> igualdad . DISTINTO rel

    AND             reduce using rule 34 (comb -> igualdad .)
    PUNTOCOMA       reduce using rule 34 (comb -> igualdad .)
    OR              reduce using rule 34 (comb -> igualdad .)
    PARDER          reduce using rule 34 (comb -> igualdad .)
    IGUAL           shift and go to state 73
    DISTINTO        shift and go to state 74


state 48

    (37) igualdad -> rel .

    IGUAL           reduce using rule 37 (igualdad -> rel .)
    DISTINTO        reduce using rule 37 (igualdad -> rel .)
    AND             reduce using rule 37 (igualdad -> rel .)
    PUNTOCOMA       reduce using rule 37 (igualdad -> rel .)
    OR              reduce using rule 37 (igualdad -> rel .)
    PARDER          reduce using rule 37 (igualdad -> rel .)


state 49

    (38) rel -> expr . MENOR expr
    (39) rel -> expr . MAYOR expr
    (40) rel -> expr . MENORIGUAL expr
    (41) rel -> expr . MAYORIGUAL expr
    (42) rel -> expr .
    (43) expr -> expr . SUMA term
    (44) expr -> expr . RESTA term

    MENOR           shift and go to state 75
    MAYOR           shift and go to state 76
    MENORIGUAL      shift and go to state 77
    MAYORIGUAL      shift and go to state 78
    IGUAL           reduce using rule 42 (rel -> expr .)
    DISTINTO        reduce using rule 42 (rel -> expr .)
    AND             reduce using rule 42 (rel -> expr .)
    PUNTOCOMA       reduce using rule 42 (rel -> expr .)
    OR              reduce using rule 42 (rel -> expr .)
    PARDER          reduce using rule 42 (rel -> expr .)
    SUMA            shift and go to state 79
    RESTA           shift and go to state 80


state 50

    (45) expr -> term .
    (46) term -> term . MULT unario
    (47) term -> term . DIV unario

    MENOR           reduce using rule 45 (expr -> term .)
    MAYOR           reduce using rule 45 (expr -> term .)
    MENORIGUAL      reduce using rule 45 (expr -> term .)
    MAYORIGUAL      reduce using rule 45 (expr -> term .)
    SUMA            reduce using rule 45 (expr -> term .)
    RESTA           reduce using rule 45 (expr -> term .)
    IGUAL           reduce using rule 45 (expr -> term .)
    DISTINTO        reduce using rule 45 (expr -> term .)
    AND             reduce using rule 45 (expr -> term .)
    PUNTOCOMA       reduce using rule 45 (expr -> term .)
    OR              reduce using rule 45 (expr -> term .)
    PARDER          reduce using rule 45 (expr -> term .)
    MULT            shift and go to state 81
    DIV             shift and go to state 82


state 51

    (50) unario -> RESTA . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    unario                         shift and go to state 83
    factor                         shift and go to state 54

state 52

    (48) term -> unario .

    MULT            reduce using rule 48 (term -> unario .)
    DIV             reduce using rule 48 (term -> unario .)
    MENOR           reduce using rule 48 (term -> unario .)
    MAYOR           reduce using rule 48 (term -> unario .)
    MENORIGUAL      reduce using rule 48 (term -> unario .)
    MAYORIGUAL      reduce using rule 48 (term -> unario .)
    SUMA            reduce using rule 48 (term -> unario .)
    RESTA           reduce using rule 48 (term -> unario .)
    IGUAL           reduce using rule 48 (term -> unario .)
    DISTINTO        reduce using rule 48 (term -> unario .)
    AND             reduce using rule 48 (term -> unario .)
    PUNTOCOMA       reduce using rule 48 (term -> unario .)
    OR              reduce using rule 48 (term -> unario .)
    PARDER          reduce using rule 48 (term -> unario .)


state 53

    (49) unario -> NO . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    unario                         shift and go to state 84
    factor                         shift and go to state 54

state 54

    (51) unario -> factor .

    MULT            reduce using rule 51 (unario -> factor .)
    DIV             reduce using rule 51 (unario -> factor .)
    MENOR           reduce using rule 51 (unario -> factor .)
    MAYOR           reduce using rule 51 (unario -> factor .)
    MENORIGUAL      reduce using rule 51 (unario -> factor .)
    MAYORIGUAL      reduce using rule 51 (unario -> factor .)
    SUMA            reduce using rule 51 (unario -> factor .)
    RESTA           reduce using rule 51 (unario -> factor .)
    IGUAL           reduce using rule 51 (unario -> factor .)
    DISTINTO        reduce using rule 51 (unario -> factor .)
    AND             reduce using rule 51 (unario -> factor .)
    PUNTOCOMA       reduce using rule 51 (unario -> factor .)
    OR              reduce using rule 51 (unario -> factor .)
    PARDER          reduce using rule 51 (unario -> factor .)


state 55

    (52) factor -> PARIZQ . exp_bool PARDER
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 85
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 56

    (53) factor -> ID .

    MULT            reduce using rule 53 (factor -> ID .)
    DIV             reduce using rule 53 (factor -> ID .)
    MENOR           reduce using rule 53 (factor -> ID .)
    MAYOR           reduce using rule 53 (factor -> ID .)
    MENORIGUAL      reduce using rule 53 (factor -> ID .)
    MAYORIGUAL      reduce using rule 53 (factor -> ID .)
    SUMA            reduce using rule 53 (factor -> ID .)
    RESTA           reduce using rule 53 (factor -> ID .)
    IGUAL           reduce using rule 53 (factor -> ID .)
    DISTINTO        reduce using rule 53 (factor -> ID .)
    AND             reduce using rule 53 (factor -> ID .)
    PUNTOCOMA       reduce using rule 53 (factor -> ID .)
    OR              reduce using rule 53 (factor -> ID .)
    PARDER          reduce using rule 53 (factor -> ID .)


state 57

    (54) factor -> NUMERO .

    MULT            reduce using rule 54 (factor -> NUMERO .)
    DIV             reduce using rule 54 (factor -> NUMERO .)
    MENOR           reduce using rule 54 (factor -> NUMERO .)
    MAYOR           reduce using rule 54 (factor -> NUMERO .)
    MENORIGUAL      reduce using rule 54 (factor -> NUMERO .)
    MAYORIGUAL      reduce using rule 54 (factor -> NUMERO .)
    SUMA            reduce using rule 54 (factor -> NUMERO .)
    RESTA           reduce using rule 54 (factor -> NUMERO .)
    IGUAL           reduce using rule 54 (factor -> NUMERO .)
    DISTINTO        reduce using rule 54 (factor -> NUMERO .)
    AND             reduce using rule 54 (factor -> NUMERO .)
    PUNTOCOMA       reduce using rule 54 (factor -> NUMERO .)
    OR              reduce using rule 54 (factor -> NUMERO .)
    PARDER          reduce using rule 54 (factor -> NUMERO .)


state 58

    (55) factor -> VERDADERO .

    MULT            reduce using rule 55 (factor -> VERDADERO .)
    DIV             reduce using rule 55 (factor -> VERDADERO .)
    MENOR           reduce using rule 55 (factor -> VERDADERO .)
    MAYOR           reduce using rule 55 (factor -> VERDADERO .)
    MENORIGUAL      reduce using rule 55 (factor -> VERDADERO .)
    MAYORIGUAL      reduce using rule 55 (factor -> VERDADERO .)
    SUMA            reduce using rule 55 (factor -> VERDADERO .)
    RESTA           reduce using rule 55 (factor -> VERDADERO .)
    IGUAL           reduce using rule 55 (factor -> VERDADERO .)
    DISTINTO        reduce using rule 55 (factor -> VERDADERO .)
    AND             reduce using rule 55 (factor -> VERDADERO .)
    PUNTOCOMA       reduce using rule 55 (factor -> VERDADERO .)
    OR              reduce using rule 55 (factor -> VERDADERO .)
    PARDER          reduce using rule 55 (factor -> VERDADERO .)


state 59

    (56) factor -> FALSO .

    MULT            reduce using rule 56 (factor -> FALSO .)
    DIV             reduce using rule 56 (factor -> FALSO .)
    MENOR           reduce using rule 56 (factor -> FALSO .)
    MAYOR           reduce using rule 56 (factor -> FALSO .)
    MENORIGUAL      reduce using rule 56 (factor -> FALSO .)
    MAYORIGUAL      reduce using rule 56 (factor -> FALSO .)
    SUMA            reduce using rule 56 (factor -> FALSO .)
    RESTA           reduce using rule 56 (factor -> FALSO .)
    IGUAL           reduce using rule 56 (factor -> FALSO .)
    DISTINTO        reduce using rule 56 (factor -> FALSO .)
    AND             reduce using rule 56 (factor -> FALSO .)
    PUNTOCOMA       reduce using rule 56 (factor -> FALSO .)
    OR              reduce using rule 56 (factor -> FALSO .)
    PARDER          reduce using rule 56 (factor -> FALSO .)


state 60

    (30) sent_break -> BREAK PUNTOCOMA .

    error           reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    SI              reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    MIENTRAS        reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    HACER           reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    LEER            reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    ESCRIBIR        reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    LLAVIZQ         reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    ID              reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 30 (sent_break -> BREAK PUNTOCOMA .)


state 61

    (5) decl -> tipo list_id PUNTOCOMA .

    ENTERO          reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    FLOTANTE        reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    BOOLEANO        reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    error           reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    SI              reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    MIENTRAS        reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    HACER           reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    LEER            reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    ESCRIBIR        reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    LLAVIZQ         reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    ID              reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    BREAK           reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)
    LLAVDER         reduce using rule 5 (decl -> tipo list_id PUNTOCOMA .)


state 62

    (9) list_id -> ID COMA . list_id
    (9) list_id -> . ID COMA list_id
    (10) list_id -> . ID

    ID              shift and go to state 35

    list_id                        shift and go to state 86

state 63

    (28) bloque -> LLAVIZQ list_sent LLAVDER .

    error           reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    SI              reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    MIENTRAS        reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    HACER           reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LEER            reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    ESCRIBIR        reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LLAVIZQ         reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    ID              reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    BREAK           reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    LLAVDER         reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    HASTA           reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    FSI             reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)
    SINO            reduce using rule 28 (bloque -> LLAVIZQ list_sent LLAVDER .)


state 64

    (13) list_sent -> error PUNTOCOMA list_sent .

    LLAVDER         reduce using rule 13 (list_sent -> error PUNTOCOMA list_sent .)


state 65

    (22) sent_if -> SI PARIZQ exp_bool . PARDER THEN bloque FSI
    (23) sent_if -> SI PARIZQ exp_bool . PARDER THEN bloque SINO bloque FSI
    (31) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 87
    OR              shift and go to state 71


state 66

    (24) sent_while -> MIENTRAS PARIZQ exp_bool . PARDER bloque
    (31) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 88
    OR              shift and go to state 71


state 67

    (25) sent_do -> HACER bloque HASTA . PARIZQ exp_bool PARDER PUNTOCOMA

    PARIZQ          shift and go to state 89


state 68

    (26) sent_read -> LEER ID PUNTOCOMA .

    error           reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    SI              reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    MIENTRAS        reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    HACER           reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    LEER            reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    ESCRIBIR        reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    LLAVIZQ         reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    ID              reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    BREAK           reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)
    LLAVDER         reduce using rule 26 (sent_read -> LEER ID PUNTOCOMA .)


state 69

    (29) sent_assign -> ID ASIGNACION exp_bool . PUNTOCOMA
    (31) exp_bool -> exp_bool . OR comb

    PUNTOCOMA       shift and go to state 90
    OR              shift and go to state 71


state 70

    (27) sent_write -> ESCRIBIR exp_bool PUNTOCOMA .

    error           reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    SI              reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    MIENTRAS        reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    HACER           reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LEER            reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    ESCRIBIR        reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LLAVIZQ         reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    ID              reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    BREAK           reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)
    LLAVDER         reduce using rule 27 (sent_write -> ESCRIBIR exp_bool PUNTOCOMA .)


state 71

    (31) exp_bool -> exp_bool OR . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    comb                           shift and go to state 91
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 72

    (33) comb -> comb AND . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    igualdad                       shift and go to state 92
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 73

    (35) igualdad -> igualdad IGUAL . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    rel                            shift and go to state 93
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 74

    (36) igualdad -> igualdad DISTINTO . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    rel                            shift and go to state 94
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 75

    (38) rel -> expr MENOR . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    expr                           shift and go to state 95
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 76

    (39) rel -> expr MAYOR . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    expr                           shift and go to state 96
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 77

    (40) rel -> expr MENORIGUAL . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    expr                           shift and go to state 97
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 78

    (41) rel -> expr MAYORIGUAL . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    expr                           shift and go to state 98
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 79

    (43) expr -> expr SUMA . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    term                           shift and go to state 99
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 80

    (44) expr -> expr RESTA . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    term                           shift and go to state 100
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 81

    (46) term -> term MULT . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    unario                         shift and go to state 101
    factor                         shift and go to state 54

state 82

    (47) term -> term DIV . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    unario                         shift and go to state 102
    factor                         shift and go to state 54

state 83

    (50) unario -> RESTA unario .

    MULT            reduce using rule 50 (unario -> RESTA unario .)
    DIV             reduce using rule 50 (unario -> RESTA unario .)
    MENOR           reduce using rule 50 (unario -> RESTA unario .)
    MAYOR           reduce using rule 50 (unario -> RESTA unario .)
    MENORIGUAL      reduce using rule 50 (unario -> RESTA unario .)
    MAYORIGUAL      reduce using rule 50 (unario -> RESTA unario .)
    SUMA            reduce using rule 50 (unario -> RESTA unario .)
    RESTA           reduce using rule 50 (unario -> RESTA unario .)
    IGUAL           reduce using rule 50 (unario -> RESTA unario .)
    DISTINTO        reduce using rule 50 (unario -> RESTA unario .)
    AND             reduce using rule 50 (unario -> RESTA unario .)
    PUNTOCOMA       reduce using rule 50 (unario -> RESTA unario .)
    OR              reduce using rule 50 (unario -> RESTA unario .)
    PARDER          reduce using rule 50 (unario -> RESTA unario .)


state 84

    (49) unario -> NO unario .

    MULT            reduce using rule 49 (unario -> NO unario .)
    DIV             reduce using rule 49 (unario -> NO unario .)
    MENOR           reduce using rule 49 (unario -> NO unario .)
    MAYOR           reduce using rule 49 (unario -> NO unario .)
    MENORIGUAL      reduce using rule 49 (unario -> NO unario .)
    MAYORIGUAL      reduce using rule 49 (unario -> NO unario .)
    SUMA            reduce using rule 49 (unario -> NO unario .)
    RESTA           reduce using rule 49 (unario -> NO unario .)
    IGUAL           reduce using rule 49 (unario -> NO unario .)
    DISTINTO        reduce using rule 49 (unario -> NO unario .)
    AND             reduce using rule 49 (unario -> NO unario .)
    PUNTOCOMA       reduce using rule 49 (unario -> NO unario .)
    OR              reduce using rule 49 (unario -> NO unario .)
    PARDER          reduce using rule 49 (unario -> NO unario .)


state 85

    (52) factor -> PARIZQ exp_bool . PARDER
    (31) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 103
    OR              shift and go to state 71


state 86

    (9) list_id -> ID COMA list_id .

    PUNTOCOMA       reduce using rule 9 (list_id -> ID COMA list_id .)


state 87

    (22) sent_if -> SI PARIZQ exp_bool PARDER . THEN bloque FSI
    (23) sent_if -> SI PARIZQ exp_bool PARDER . THEN bloque SINO bloque FSI

    THEN            shift and go to state 104


state 88

    (24) sent_while -> MIENTRAS PARIZQ exp_bool PARDER . bloque
    (28) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 13

    bloque                         shift and go to state 105

state 89

    (25) sent_do -> HACER bloque HASTA PARIZQ . exp_bool PARDER PUNTOCOMA
    (31) exp_bool -> . exp_bool OR comb
    (32) exp_bool -> . comb
    (33) comb -> . comb AND igualdad
    (34) comb -> . igualdad
    (35) igualdad -> . igualdad IGUAL rel
    (36) igualdad -> . igualdad DISTINTO rel
    (37) igualdad -> . rel
    (38) rel -> . expr MENOR expr
    (39) rel -> . expr MAYOR expr
    (40) rel -> . expr MENORIGUAL expr
    (41) rel -> . expr MAYORIGUAL expr
    (42) rel -> . expr
    (43) expr -> . expr SUMA term
    (44) expr -> . expr RESTA term
    (45) expr -> . term
    (46) term -> . term MULT unario
    (47) term -> . term DIV unario
    (48) term -> . unario
    (49) unario -> . NO unario
    (50) unario -> . RESTA unario
    (51) unario -> . factor
    (52) factor -> . PARIZQ exp_bool PARDER
    (53) factor -> . ID
    (54) factor -> . NUMERO
    (55) factor -> . VERDADERO
    (56) factor -> . FALSO

    NO              shift and go to state 53
    RESTA           shift and go to state 51
    PARIZQ          shift and go to state 55
    ID              shift and go to state 56
    NUMERO          shift and go to state 57
    VERDADERO       shift and go to state 58
    FALSO           shift and go to state 59

    exp_bool                       shift and go to state 106
    comb                           shift and go to state 46
    igualdad                       shift and go to state 47
    rel                            shift and go to state 48
    expr                           shift and go to state 49
    term                           shift and go to state 50
    unario                         shift and go to state 52
    factor                         shift and go to state 54

state 90

    (29) sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .

    error           reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    SI              reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    MIENTRAS        reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    HACER           reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LEER            reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    ESCRIBIR        reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LLAVIZQ         reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    ID              reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    BREAK           reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)
    LLAVDER         reduce using rule 29 (sent_assign -> ID ASIGNACION exp_bool PUNTOCOMA .)


state 91

    (31) exp_bool -> exp_bool OR comb .
    (33) comb -> comb . AND igualdad

    PUNTOCOMA       reduce using rule 31 (exp_bool -> exp_bool OR comb .)
    OR              reduce using rule 31 (exp_bool -> exp_bool OR comb .)
    PARDER          reduce using rule 31 (exp_bool -> exp_bool OR comb .)
    AND             shift and go to state 72


state 92

    (33) comb -> comb AND igualdad .
    (35) igualdad -> igualdad . IGUAL rel
    (36) igualdad -> igualdad . DISTINTO rel

    AND             reduce using rule 33 (comb -> comb AND igualdad .)
    PUNTOCOMA       reduce using rule 33 (comb -> comb AND igualdad .)
    OR              reduce using rule 33 (comb -> comb AND igualdad .)
    PARDER          reduce using rule 33 (comb -> comb AND igualdad .)
    IGUAL           shift and go to state 73
    DISTINTO        shift and go to state 74


state 93

    (35) igualdad -> igualdad IGUAL rel .

    IGUAL           reduce using rule 35 (igualdad -> igualdad IGUAL rel .)
    DISTINTO        reduce using rule 35 (igualdad -> igualdad IGUAL rel .)
    AND             reduce using rule 35 (igualdad -> igualdad IGUAL rel .)
    PUNTOCOMA       reduce using rule 35 (igualdad -> igualdad IGUAL rel .)
    OR              reduce using rule 35 (igualdad -> igualdad IGUAL rel .)
    PARDER          reduce using rule 35 (igualdad -> igualdad IGUAL rel .)


state 94

    (36) igualdad -> igualdad DISTINTO rel .

    IGUAL           reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)
    DISTINTO        reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)
    AND             reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)
    PUNTOCOMA       reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)
    OR              reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)
    PARDER          reduce using rule 36 (igualdad -> igualdad DISTINTO rel .)


state 95

    (38) rel -> expr MENOR expr .
    (43) expr -> expr . SUMA term
    (44) expr -> expr . RESTA term

    IGUAL           reduce using rule 38 (rel -> expr MENOR expr .)
    DISTINTO        reduce using rule 38 (rel -> expr MENOR expr .)
    AND             reduce using rule 38 (rel -> expr MENOR expr .)
    PUNTOCOMA       reduce using rule 38 (rel -> expr MENOR expr .)
    OR              reduce using rule 38 (rel -> expr MENOR expr .)
    PARDER          reduce using rule 38 (rel -> expr MENOR expr .)
    SUMA            shift and go to state 79
    RESTA           shift and go to state 80


state 96

    (39) rel -> expr MAYOR expr .
    (43) expr -> expr . SUMA term
    (44) expr -> expr . RESTA term

    IGUAL           reduce using rule 39 (rel -> expr MAYOR expr .)
    DISTINTO        reduce using rule 39 (rel -> expr MAYOR expr .)
    AND             reduce using rule 39 (rel -> expr MAYOR expr .)
    PUNTOCOMA       reduce using rule 39 (rel -> expr MAYOR expr .)
    OR              reduce using rule 39 (rel -> expr MAYOR expr .)
    PARDER          reduce using rule 39 (rel -> expr MAYOR expr .)
    SUMA            shift and go to state 79
    RESTA           shift and go to state 80


state 97

    (40) rel -> expr MENORIGUAL expr .
    (43) expr -> expr . SUMA term
    (44) expr -> expr . RESTA term

    IGUAL           reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    DISTINTO        reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    AND             reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    PUNTOCOMA       reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    OR              reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    PARDER          reduce using rule 40 (rel -> expr MENORIGUAL expr .)
    SUMA            shift and go to state 79
    RESTA           shift and go to state 80


state 98

    (41) rel -> expr MAYORIGUAL expr .
    (43) expr -> expr . SUMA term
    (44) expr -> expr . RESTA term

    IGUAL           reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    DISTINTO        reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    AND             reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    PUNTOCOMA       reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    OR              reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    PARDER          reduce using rule 41 (rel -> expr MAYORIGUAL expr .)
    SUMA            shift and go to state 79
    RESTA           shift and go to state 80


state 99

    (43) expr -> expr SUMA term .
    (46) term -> term . MULT unario
    (47) term -> term . DIV unario

    MENOR           reduce using rule 43 (expr -> expr SUMA term .)
    MAYOR           reduce using rule 43 (expr -> expr SUMA term .)
    MENORIGUAL      reduce using rule 43 (expr -> expr SUMA term .)
    MAYORIGUAL      reduce using rule 43 (expr -> expr SUMA term .)
    SUMA            reduce using rule 43 (expr -> expr SUMA term .)
    RESTA           reduce using rule 43 (expr -> expr SUMA term .)
    IGUAL           reduce using rule 43 (expr -> expr SUMA term .)
    DISTINTO        reduce using rule 43 (expr -> expr SUMA term .)
    AND             reduce using rule 43 (expr -> expr SUMA term .)
    PUNTOCOMA       reduce using rule 43 (expr -> expr SUMA term .)
    OR              reduce using rule 43 (expr -> expr SUMA term .)
    PARDER          reduce using rule 43 (expr -> expr SUMA term .)
    MULT            shift and go to state 81
    DIV             shift and go to state 82


state 100

    (44) expr -> expr RESTA term .
    (46) term -> term . MULT unario
    (47) term -> term . DIV unario

    MENOR           reduce using rule 44 (expr -> expr RESTA term .)
    MAYOR           reduce using rule 44 (expr -> expr RESTA term .)
    MENORIGUAL      reduce using rule 44 (expr -> expr RESTA term .)
    MAYORIGUAL      reduce using rule 44 (expr -> expr RESTA term .)
    SUMA            reduce using rule 44 (expr -> expr RESTA term .)
    RESTA           reduce using rule 44 (expr -> expr RESTA term .)
    IGUAL           reduce using rule 44 (expr -> expr RESTA term .)
    DISTINTO        reduce using rule 44 (expr -> expr RESTA term .)
    AND             reduce using rule 44 (expr -> expr RESTA term .)
    PUNTOCOMA       reduce using rule 44 (expr -> expr RESTA term .)
    OR              reduce using rule 44 (expr -> expr RESTA term .)
    PARDER          reduce using rule 44 (expr -> expr RESTA term .)
    MULT            shift and go to state 81
    DIV             shift and go to state 82


state 101

    (46) term -> term MULT unario .

    MULT            reduce using rule 46 (term -> term MULT unario .)
    DIV             reduce using rule 46 (term -> term MULT unario .)
    MENOR           reduce using rule 46 (term -> term MULT unario .)
    MAYOR           reduce using rule 46 (term -> term MULT unario .)
    MENORIGUAL      reduce using rule 46 (term -> term MULT unario .)
    MAYORIGUAL      reduce using rule 46 (term -> term MULT unario .)
    SUMA            reduce using rule 46 (term -> term MULT unario .)
    RESTA           reduce using rule 46 (term -> term MULT unario .)
    IGUAL           reduce using rule 46 (term -> term MULT unario .)
    DISTINTO        reduce using rule 46 (term -> term MULT unario .)
    AND             reduce using rule 46 (term -> term MULT unario .)
    PUNTOCOMA       reduce using rule 46 (term -> term MULT unario .)
    OR              reduce using rule 46 (term -> term MULT unario .)
    PARDER          reduce using rule 46 (term -> term MULT unario .)


state 102

    (47) term -> term DIV unario .

    MULT            reduce using rule 47 (term -> term DIV unario .)
    DIV             reduce using rule 47 (term -> term DIV unario .)
    MENOR           reduce using rule 47 (term -> term DIV unario .)
    MAYOR           reduce using rule 47 (term -> term DIV unario .)
    MENORIGUAL      reduce using rule 47 (term -> term DIV unario .)
    MAYORIGUAL      reduce using rule 47 (term -> term DIV unario .)
    SUMA            reduce using rule 47 (term -> term DIV unario .)
    RESTA           reduce using rule 47 (term -> term DIV unario .)
    IGUAL           reduce using rule 47 (term -> term DIV unario .)
    DISTINTO        reduce using rule 47 (term -> term DIV unario .)
    AND             reduce using rule 47 (term -> term DIV unario .)
    PUNTOCOMA       reduce using rule 47 (term -> term DIV unario .)
    OR              reduce using rule 47 (term -> term DIV unario .)
    PARDER          reduce using rule 47 (term -> term DIV unario .)


state 103

    (52) factor -> PARIZQ exp_bool PARDER .

    MULT            reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    DIV             reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    MENOR           reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    MAYOR           reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    MENORIGUAL      reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    MAYORIGUAL      reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    SUMA            reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    RESTA           reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    IGUAL           reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    DISTINTO        reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    AND             reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    PUNTOCOMA       reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    OR              reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)
    PARDER          reduce using rule 52 (factor -> PARIZQ exp_bool PARDER .)


state 104

    (22) sent_if -> SI PARIZQ exp_bool PARDER THEN . bloque FSI
    (23) sent_if -> SI PARIZQ exp_bool PARDER THEN . bloque SINO bloque FSI
    (28) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 13

    bloque                         shift and go to state 107

state 105

    (24) sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .

    error           reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    SI              reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    MIENTRAS        reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    HACER           reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LEER            reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    ESCRIBIR        reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LLAVIZQ         reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    ID              reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    BREAK           reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)
    LLAVDER         reduce using rule 24 (sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque .)


state 106

    (25) sent_do -> HACER bloque HASTA PARIZQ exp_bool . PARDER PUNTOCOMA
    (31) exp_bool -> exp_bool . OR comb

    PARDER          shift and go to state 108
    OR              shift and go to state 71


state 107

    (22) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque . FSI
    (23) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque . SINO bloque FSI

    FSI             shift and go to state 109
    SINO            shift and go to state 110


state 108

    (25) sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 111


state 109

    (22) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .

    error           reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    SI              reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    MIENTRAS        reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    HACER           reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LEER            reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    ESCRIBIR        reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LLAVIZQ         reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    ID              reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    BREAK           reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)
    LLAVDER         reduce using rule 22 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque FSI .)


state 110

    (23) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO . bloque FSI
    (28) bloque -> . LLAVIZQ list_sent LLAVDER

    LLAVIZQ         shift and go to state 13

    bloque                         shift and go to state 112

state 111

    (25) sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .

    error           reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    SI              reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    MIENTRAS        reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    HACER           reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LEER            reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    ESCRIBIR        reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LLAVIZQ         reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    ID              reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    BREAK           reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 25 (sent_do -> HACER bloque HASTA PARIZQ exp_bool PARDER PUNTOCOMA .)


state 112

    (23) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque . FSI

    FSI             shift and go to state 113


state 113

    (23) sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .

    error           reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    SI              reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    MIENTRAS        reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    HACER           reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LEER            reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    ESCRIBIR        reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LLAVIZQ         reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    ID              reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    BREAK           reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)
    LLAVDER         reduce using rule 23 (sent_if -> SI PARIZQ exp_bool PARDER THEN bloque SINO bloque FSI .)

